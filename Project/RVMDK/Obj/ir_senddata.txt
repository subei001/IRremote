; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\Obj\ir_senddata.o --depend=.\Obj\ir_senddata.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\User\inc -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -ID:\MDK4\ARM\INC -ID:\MDK4\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\ir_senddata.crf ..\..\User\src\IR_Senddata.c]
                          THUMB

                          AREA ||i.Send_IRdata||, CODE, READONLY, ALIGN=2

                  Send_IRdata PROC
;;;13     ********************************************************/
;;;14     void Send_IRdata(unsigned char x_irdata)
000000  b510              PUSH     {r4,lr}
;;;15     {
;;;16     	unsigned char i;   //循环移位计数
;;;17     	unsigned char irdata;  //数据寄存
;;;18     	
;;;19     	irdata = x_irdata;
000002  4601              MOV      r1,r0
;;;20     	for(i=0;i<8;i++)
000004  2200              MOVS     r2,#0
000006  e028              B        |L1.90|
                  |L1.8|
;;;21     	{
;;;22     		//先发送0.56ms的38KHz红外波（即编码中0.56ms的低电平）
;;;23     		count = 0;
000008  2300              MOVS     r3,#0
00000a  4c15              LDR      r4,|L1.96|
00000c  6023              STR      r3,[r4,#0]  ; count
;;;24     		endcount = 42;	//0.56ms / 13.15us = 42 (42 / 2 = 21，即发送0.56ms的载波中包括21个载波周期)
00000e  232a              MOVS     r3,#0x2a
000010  4c14              LDR      r4,|L1.100|
000012  6023              STR      r3,[r4,#0]  ; endcount
;;;25     		IR_flag = 1; //发送标志
000014  2301              MOVS     r3,#1
000016  4c14              LDR      r4,|L1.104|
000018  7023              STRB     r3,[r4,#0]
;;;26     		while(count < endcount);
00001a  bf00              NOP      
                  |L1.28|
00001c  4b10              LDR      r3,|L1.96|
00001e  681b              LDR      r3,[r3,#0]  ; count
000020  4c10              LDR      r4,|L1.100|
000022  6824              LDR      r4,[r4,#0]  ; endcount
000024  42a3              CMP      r3,r4
000026  d3f9              BCC      |L1.28|
;;;27     
;;;28     		if(irdata&0x01) //判断最低位是0还是1（0则延时(1.125ms-0.56ms=0.565ms)；1则延时(2.25ms-0.56ms=1.685ms)）
000028  f0110f01          TST      r1,#1
00002c  d003              BEQ      |L1.54|
;;;29     		{
;;;30     			endcount = 128;	  //1.685ms / 13.15us = 128
00002e  2380              MOVS     r3,#0x80
000030  4c0c              LDR      r4,|L1.100|
000032  6023              STR      r3,[r4,#0]  ; endcount
000034  e002              B        |L1.60|
                  |L1.54|
;;;31     		}
;;;32     		else endcount = 43;	  //0.565ms / 13.15us = 43
000036  232b              MOVS     r3,#0x2b
000038  4c0a              LDR      r4,|L1.100|
00003a  6023              STR      r3,[r4,#0]  ; endcount
                  |L1.60|
;;;33     
;;;34     		count = 0;
00003c  2300              MOVS     r3,#0
00003e  4c08              LDR      r4,|L1.96|
000040  6023              STR      r3,[r4,#0]  ; count
;;;35     		IR_flag = 0;
000042  4c09              LDR      r4,|L1.104|
000044  7023              STRB     r3,[r4,#0]
;;;36     		while(count < endcount);
000046  bf00              NOP      
                  |L1.72|
000048  4b05              LDR      r3,|L1.96|
00004a  681b              LDR      r3,[r3,#0]  ; count
00004c  4c05              LDR      r4,|L1.100|
00004e  6824              LDR      r4,[r4,#0]  ; endcount
000050  42a3              CMP      r3,r4
000052  d3f9              BCC      |L1.72|
;;;37     
;;;38     		irdata = irdata >> 1;
000054  1049              ASRS     r1,r1,#1
000056  1c53              ADDS     r3,r2,#1              ;20
000058  b2da              UXTB     r2,r3                 ;20
                  |L1.90|
00005a  2a08              CMP      r2,#8                 ;20
00005c  dbd4              BLT      |L1.8|
;;;39     	}		  
;;;40     
;;;41     }
00005e  bd10              POP      {r4,pc}
;;;42     /*******************************************************************
                          ENDP

                  |L1.96|
                          DCD      count
                  |L1.100|
                          DCD      endcount
                  |L1.104|
                          DCD      IR_flag

                          AREA ||i.Write_IRdata||, CODE, READONLY, ALIGN=2

                  Write_IRdata PROC
;;;52     *******************************************************************/
;;;53     void Write_IRdata(unsigned char p_irdata)   
000000  b510              PUSH     {r4,lr}
;;;54     {	
000002  4604              MOV      r4,r0
;;;55     //	irdata1 = 3;   //（用户码）自己定义
;;;56     //	irdata2 = 252;	//（用户反码）
;;;57     
;;;58     	//发送9ms的引导码（低电平）
;;;59     	
;;;60     	endcount = 684;	 //9ms / 13.15us = 684
000004  f44f702b          MOV      r0,#0x2ac
000008  491c              LDR      r1,|L2.124|
00000a  6008              STR      r0,[r1,#0]  ; endcount
;;;61     	count = 0;
00000c  2000              MOVS     r0,#0
00000e  491c              LDR      r1,|L2.128|
000010  6008              STR      r0,[r1,#0]  ; count
;;;62     	IR_flag = 1; //发送标志(发送38K载波)
000012  2001              MOVS     r0,#1
000014  491b              LDR      r1,|L2.132|
000016  7008              STRB     r0,[r1,#0]
;;;63     	while(count < endcount);
000018  bf00              NOP      
                  |L2.26|
00001a  4819              LDR      r0,|L2.128|
00001c  6800              LDR      r0,[r0,#0]  ; count
00001e  4917              LDR      r1,|L2.124|
000020  6809              LDR      r1,[r1,#0]  ; endcount
000022  4288              CMP      r0,r1
000024  d3f9              BCC      |L2.26|
;;;64     
;;;65     	//发送4.5ms的结束码（高电平）
;;;66     	count = 0;
000026  2000              MOVS     r0,#0
000028  4915              LDR      r1,|L2.128|
00002a  6008              STR      r0,[r1,#0]  ; count
;;;67     	endcount = 342;	 //4.5ms / 13.15us = 342 
00002c  f44f70ab          MOV      r0,#0x156
000030  4912              LDR      r1,|L2.124|
000032  6008              STR      r0,[r1,#0]  ; endcount
;;;68     	IR_flag = 0; //发送标志（发送0）
000034  2000              MOVS     r0,#0
000036  4913              LDR      r1,|L2.132|
000038  7008              STRB     r0,[r1,#0]
;;;69     	while(count < endcount);
00003a  bf00              NOP      
                  |L2.60|
00003c  4810              LDR      r0,|L2.128|
00003e  6800              LDR      r0,[r0,#0]  ; count
000040  490e              LDR      r1,|L2.124|
000042  6809              LDR      r1,[r1,#0]  ; endcount
000044  4288              CMP      r0,r1
000046  d3f9              BCC      |L2.60|
;;;70     	
;;;71     //	Send_IRdata(irdata1);       //发送16位地址的前八位（8位用户码）
;;;72     //    Send_IRdata(irdata2);      //发送16位地址的后八位（8位用户反码）
;;;73     	Send_IRdata(p_irdata);	  //发送8位键数据码
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       Send_IRdata
;;;74     //	Send_IRdata(~p_irdata); //发送8位键数据反码
;;;75     	Send_IRdata(0x66);	//结束码（也用于辨别）
00004e  2066              MOVS     r0,#0x66
000050  f7fffffe          BL       Send_IRdata
;;;76     
;;;77     	
;;;78     	//最后发送0.56ms的38KHz红外载波（即编码中0.56ms的低电平）
;;;79     	count = 0;
000054  2000              MOVS     r0,#0
000056  490a              LDR      r1,|L2.128|
000058  6008              STR      r0,[r1,#0]  ; count
;;;80     	endcount = 42;	//0.56ms / 13.15us = 42 (42 / 2 = 21，即发送0.56ms的载波中包括21个载波周期)
00005a  202a              MOVS     r0,#0x2a
00005c  4907              LDR      r1,|L2.124|
00005e  6008              STR      r0,[r1,#0]  ; endcount
;;;81     	IR_flag = 1; //发送标志
000060  2001              MOVS     r0,#1
000062  4908              LDR      r1,|L2.132|
000064  7008              STRB     r0,[r1,#0]
;;;82     	while(count < endcount);
000066  bf00              NOP      
                  |L2.104|
000068  4805              LDR      r0,|L2.128|
00006a  6800              LDR      r0,[r0,#0]  ; count
00006c  4903              LDR      r1,|L2.124|
00006e  6809              LDR      r1,[r1,#0]  ; endcount
000070  4288              CMP      r0,r1
000072  d3f9              BCC      |L2.104|
;;;83     	IR_flag = 0; 			
000074  2000              MOVS     r0,#0
000076  4903              LDR      r1,|L2.132|
000078  7008              STRB     r0,[r1,#0]
;;;84     }	
00007a  bd10              POP      {r4,pc}
                          ENDP

                  |L2.124|
                          DCD      endcount
                  |L2.128|
                          DCD      count
                  |L2.132|
                          DCD      IR_flag

                          AREA ||.data||, DATA, ALIGN=2

                  IR_flag
000000  00                DCB      0x00
                  irdata1
000001  00                DCB      0x00
                  irdata2
000002  0000              DCB      0x00,0x00
                  endcount
                          DCD      0x00000000
