; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\key.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\key.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\User\inc -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\RVMDK -ID:\keil\ARM\RV31\INC -ID:\keil\ARM\CMSIS\Include -ID:\keil\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=528 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\key.crf key.c]
                          THUMB

                          AREA ||i.Get_KeyValue||, CODE, READONLY, ALIGN=2

                  Get_KeyValue PROC
;;;42     
;;;43     unsigned char Get_KeyValue(void)
000000  b570              PUSH     {r4-r6,lr}
;;;44     {
;;;45     	u8 temp_key;
;;;46     	unsigned char  key;
;;;47     	GPIO_Write(KEY_PORT, 0xfe);
000002  21fe              MOVS     r1,#0xfe
000004  486a              LDR      r0,|L1.432|
000006  f7fffffe          BL       GPIO_Write
;;;48     	temp_key = GPIO_ReadInputData(KEY_PORT);
00000a  4869              LDR      r0,|L1.432|
00000c  f7fffffe          BL       GPIO_ReadInputData
000010  b2c4              UXTB     r4,r0
;;;49     	temp_key = temp_key & 0xf0;     //11110000
000012  f00404f0          AND      r4,r4,#0xf0
;;;50     	if(temp_key != 0xf0)
000016  2cf0              CMP      r4,#0xf0
000018  d028              BEQ      |L1.108|
;;;51     	{
;;;52     		Delay_ms(10);
00001a  200a              MOVS     r0,#0xa
00001c  f7fffffe          BL       Delay_ms
;;;53     		temp_key = GPIO_ReadInputData(KEY_PORT);
000020  4863              LDR      r0,|L1.432|
000022  f7fffffe          BL       GPIO_ReadInputData
000026  b2c4              UXTB     r4,r0
;;;54     		temp_key = temp_key & 0xf0;
000028  f00404f0          AND      r4,r4,#0xf0
;;;55     		if(temp_key != 0xf0)
00002c  2cf0              CMP      r4,#0xf0
00002e  d01d              BEQ      |L1.108|
;;;56     		{
;;;57     			temp_key = GPIO_ReadInputData(KEY_PORT);
000030  485f              LDR      r0,|L1.432|
000032  f7fffffe          BL       GPIO_ReadInputData
000036  b2c4              UXTB     r4,r0
;;;58     			switch(temp_key)
000038  2c7e              CMP      r4,#0x7e
00003a  d00b              BEQ      |L1.84|
00003c  2cbe              CMP      r4,#0xbe
00003e  d007              BEQ      |L1.80|
000040  2cde              CMP      r4,#0xde
000042  d003              BEQ      |L1.76|
000044  2cee              CMP      r4,#0xee
000046  d107              BNE      |L1.88|
;;;59     			{
;;;60     				case 0xee: key = '1';  break;
000048  2531              MOVS     r5,#0x31
00004a  e005              B        |L1.88|
                  |L1.76|
;;;61     				case 0xde: key = '2';  break;
00004c  2532              MOVS     r5,#0x32
00004e  e003              B        |L1.88|
                  |L1.80|
;;;62     				case 0xbe: key = '3';  break;
000050  2533              MOVS     r5,#0x33
000052  e001              B        |L1.88|
                  |L1.84|
;;;63     				case 0x7e: key = 'A';  break;
000054  2541              MOVS     r5,#0x41
000056  bf00              NOP      
                  |L1.88|
000058  bf00              NOP                            ;60
;;;64     			}	  
;;;65     			while(temp_key != 0xf0)		  //等待按键释放
00005a  e005              B        |L1.104|
                  |L1.92|
;;;66     			{
;;;67     				temp_key = GPIO_ReadInputData(KEY_PORT);
00005c  4854              LDR      r0,|L1.432|
00005e  f7fffffe          BL       GPIO_ReadInputData
000062  b2c4              UXTB     r4,r0
;;;68     				temp_key = temp_key&0xf0;
000064  f00404f0          AND      r4,r4,#0xf0
                  |L1.104|
000068  2cf0              CMP      r4,#0xf0              ;65
00006a  d1f7              BNE      |L1.92|
                  |L1.108|
;;;69     			}
;;;70     		}	
;;;71     	}    /* end of if(temp_key!=0xf0)*/
;;;72     
;;;73     	GPIO_Write(KEY_PORT,0xfd);
00006c  21fd              MOVS     r1,#0xfd
00006e  4850              LDR      r0,|L1.432|
000070  f7fffffe          BL       GPIO_Write
;;;74     	temp_key = GPIO_ReadInputData(KEY_PORT);
000074  484e              LDR      r0,|L1.432|
000076  f7fffffe          BL       GPIO_ReadInputData
00007a  b2c4              UXTB     r4,r0
;;;75     	temp_key=temp_key&0xf0;     //11110000
00007c  f00404f0          AND      r4,r4,#0xf0
;;;76     	if(temp_key!=0xf0)
000080  2cf0              CMP      r4,#0xf0
000082  d028              BEQ      |L1.214|
;;;77     	{
;;;78     		Delay_ms(10);
000084  200a              MOVS     r0,#0xa
000086  f7fffffe          BL       Delay_ms
;;;79     		temp_key = GPIO_ReadInputData(KEY_PORT);
00008a  4849              LDR      r0,|L1.432|
00008c  f7fffffe          BL       GPIO_ReadInputData
000090  b2c4              UXTB     r4,r0
;;;80     		temp_key=temp_key&0xf0;
000092  f00404f0          AND      r4,r4,#0xf0
;;;81     		if(temp_key!=0xf0)
000096  2cf0              CMP      r4,#0xf0
000098  d01d              BEQ      |L1.214|
;;;82     		{
;;;83     			temp_key = GPIO_ReadInputData(KEY_PORT);
00009a  4845              LDR      r0,|L1.432|
00009c  f7fffffe          BL       GPIO_ReadInputData
0000a0  b2c4              UXTB     r4,r0
;;;84     			switch(temp_key)
0000a2  2c7d              CMP      r4,#0x7d
0000a4  d00b              BEQ      |L1.190|
0000a6  2cbd              CMP      r4,#0xbd
0000a8  d007              BEQ      |L1.186|
0000aa  2cdd              CMP      r4,#0xdd
0000ac  d003              BEQ      |L1.182|
0000ae  2ced              CMP      r4,#0xed
0000b0  d107              BNE      |L1.194|
;;;85     			{
;;;86     				case 0xed: key='4';  break;
0000b2  2534              MOVS     r5,#0x34
0000b4  e005              B        |L1.194|
                  |L1.182|
;;;87     				case 0xdd: key='5';  break;
0000b6  2535              MOVS     r5,#0x35
0000b8  e003              B        |L1.194|
                  |L1.186|
;;;88     				case 0xbd: key='6';  break;
0000ba  2536              MOVS     r5,#0x36
0000bc  e001              B        |L1.194|
                  |L1.190|
;;;89     				case 0x7d: key='B';  break;
0000be  2542              MOVS     r5,#0x42
0000c0  bf00              NOP      
                  |L1.194|
0000c2  bf00              NOP                            ;86
;;;90     			}	  
;;;91     			while(temp_key!=0xf0)		  //等待按键释放
0000c4  e005              B        |L1.210|
                  |L1.198|
;;;92     			{
;;;93     				temp_key = GPIO_ReadInputData(KEY_PORT);
0000c6  483a              LDR      r0,|L1.432|
0000c8  f7fffffe          BL       GPIO_ReadInputData
0000cc  b2c4              UXTB     r4,r0
;;;94     				temp_key=temp_key&0xf0;
0000ce  f00404f0          AND      r4,r4,#0xf0
                  |L1.210|
0000d2  2cf0              CMP      r4,#0xf0              ;91
0000d4  d1f7              BNE      |L1.198|
                  |L1.214|
;;;95     			}
;;;96     		}	
;;;97     	}    /* end of if(temp_key!=0xf0)*/
;;;98     
;;;99     	GPIO_Write(KEY_PORT,0xfb);
0000d6  21fb              MOVS     r1,#0xfb
0000d8  4835              LDR      r0,|L1.432|
0000da  f7fffffe          BL       GPIO_Write
;;;100    	temp_key = GPIO_ReadInputData(KEY_PORT);
0000de  4834              LDR      r0,|L1.432|
0000e0  f7fffffe          BL       GPIO_ReadInputData
0000e4  b2c4              UXTB     r4,r0
;;;101    	temp_key=temp_key&0xf0;     //11110000
0000e6  f00404f0          AND      r4,r4,#0xf0
;;;102    	if(temp_key!=0xf0)
0000ea  2cf0              CMP      r4,#0xf0
0000ec  d028              BEQ      |L1.320|
;;;103    	{
;;;104    		Delay_ms(10);
0000ee  200a              MOVS     r0,#0xa
0000f0  f7fffffe          BL       Delay_ms
;;;105    		temp_key = GPIO_ReadInputData(KEY_PORT);
0000f4  482e              LDR      r0,|L1.432|
0000f6  f7fffffe          BL       GPIO_ReadInputData
0000fa  b2c4              UXTB     r4,r0
;;;106    		temp_key=temp_key&0xf0;
0000fc  f00404f0          AND      r4,r4,#0xf0
;;;107    		if(temp_key!=0xf0)
000100  2cf0              CMP      r4,#0xf0
000102  d01d              BEQ      |L1.320|
;;;108    		{
;;;109    			temp_key = GPIO_ReadInputData(KEY_PORT);
000104  482a              LDR      r0,|L1.432|
000106  f7fffffe          BL       GPIO_ReadInputData
00010a  b2c4              UXTB     r4,r0
;;;110    			switch(temp_key)
00010c  2c7b              CMP      r4,#0x7b
00010e  d00b              BEQ      |L1.296|
000110  2cbb              CMP      r4,#0xbb
000112  d007              BEQ      |L1.292|
000114  2cdb              CMP      r4,#0xdb
000116  d003              BEQ      |L1.288|
000118  2ceb              CMP      r4,#0xeb
00011a  d107              BNE      |L1.300|
;;;111    			{
;;;112    				case 0xeb: key='7';  break;
00011c  2537              MOVS     r5,#0x37
00011e  e005              B        |L1.300|
                  |L1.288|
;;;113    				case 0xdb: key='8';  break;
000120  2538              MOVS     r5,#0x38
000122  e003              B        |L1.300|
                  |L1.292|
;;;114    				case 0xbb: key='9';  break;
000124  2539              MOVS     r5,#0x39
000126  e001              B        |L1.300|
                  |L1.296|
;;;115    				case 0x7b: key='C';  break;
000128  2543              MOVS     r5,#0x43
00012a  bf00              NOP      
                  |L1.300|
00012c  bf00              NOP                            ;112
;;;116    			}	  
;;;117    			while(temp_key!=0xf0)		  //等待按键释放
00012e  e005              B        |L1.316|
                  |L1.304|
;;;118    			{
;;;119    				temp_key = GPIO_ReadInputData(KEY_PORT);
000130  481f              LDR      r0,|L1.432|
000132  f7fffffe          BL       GPIO_ReadInputData
000136  b2c4              UXTB     r4,r0
;;;120    				temp_key=temp_key&0xf0;
000138  f00404f0          AND      r4,r4,#0xf0
                  |L1.316|
00013c  2cf0              CMP      r4,#0xf0              ;117
00013e  d1f7              BNE      |L1.304|
                  |L1.320|
;;;121    			}
;;;122    		}	
;;;123    	}    /* end of if(temp_key!=0xf0)*/
;;;124    
;;;125    	GPIO_Write(KEY_PORT,0xf7);
000140  21f7              MOVS     r1,#0xf7
000142  481b              LDR      r0,|L1.432|
000144  f7fffffe          BL       GPIO_Write
;;;126    	temp_key = GPIO_ReadInputData(KEY_PORT);
000148  4819              LDR      r0,|L1.432|
00014a  f7fffffe          BL       GPIO_ReadInputData
00014e  b2c4              UXTB     r4,r0
;;;127    	temp_key=temp_key&0xf0;     //11110000
000150  f00404f0          AND      r4,r4,#0xf0
;;;128    	if(temp_key!=0xf0)
000154  2cf0              CMP      r4,#0xf0
000156  d028              BEQ      |L1.426|
;;;129    	{
;;;130    		Delay_ms(10);
000158  200a              MOVS     r0,#0xa
00015a  f7fffffe          BL       Delay_ms
;;;131    		temp_key = GPIO_ReadInputData(KEY_PORT);
00015e  4814              LDR      r0,|L1.432|
000160  f7fffffe          BL       GPIO_ReadInputData
000164  b2c4              UXTB     r4,r0
;;;132    		temp_key=temp_key&0xf0;
000166  f00404f0          AND      r4,r4,#0xf0
;;;133    		if(temp_key!=0xf0)
00016a  2cf0              CMP      r4,#0xf0
00016c  d01d              BEQ      |L1.426|
;;;134    		{
;;;135    			temp_key = GPIO_ReadInputData(KEY_PORT);
00016e  4810              LDR      r0,|L1.432|
000170  f7fffffe          BL       GPIO_ReadInputData
000174  b2c4              UXTB     r4,r0
;;;136    			switch(temp_key)
000176  2c77              CMP      r4,#0x77
000178  d00b              BEQ      |L1.402|
00017a  2cb7              CMP      r4,#0xb7
00017c  d007              BEQ      |L1.398|
00017e  2cd7              CMP      r4,#0xd7
000180  d003              BEQ      |L1.394|
000182  2ce7              CMP      r4,#0xe7
000184  d107              BNE      |L1.406|
;;;137    			{
;;;138    				case 0xe7: key='*';  break;
000186  252a              MOVS     r5,#0x2a
000188  e005              B        |L1.406|
                  |L1.394|
;;;139    				case 0xd7: key='0';  break;
00018a  2530              MOVS     r5,#0x30
00018c  e003              B        |L1.406|
                  |L1.398|
;;;140    				case 0xb7: key='#';  break;
00018e  2523              MOVS     r5,#0x23
000190  e001              B        |L1.406|
                  |L1.402|
;;;141    				case 0x77: key='D';  break;
000192  2544              MOVS     r5,#0x44
000194  bf00              NOP      
                  |L1.406|
000196  bf00              NOP                            ;138
;;;142    			}	  
;;;143    			while(temp_key!=0xf0)		  //等待按键释放
000198  e005              B        |L1.422|
                  |L1.410|
;;;144    			{
;;;145    				temp_key = GPIO_ReadInputData(KEY_PORT);
00019a  4805              LDR      r0,|L1.432|
00019c  f7fffffe          BL       GPIO_ReadInputData
0001a0  b2c4              UXTB     r4,r0
;;;146    				temp_key=temp_key&0xf0;
0001a2  f00404f0          AND      r4,r4,#0xf0
                  |L1.422|
0001a6  2cf0              CMP      r4,#0xf0              ;143
0001a8  d1f7              BNE      |L1.410|
                  |L1.426|
;;;147    			}
;;;148    		}	
;;;149    	}    /* end of if(temp_key!=0xf0)*/
;;;150    	return key;
0001aa  4628              MOV      r0,r5
;;;151    }
0001ac  bd70              POP      {r4-r6,pc}
;;;152    
                          ENDP

0001ae  0000              DCW      0x0000
                  |L1.432|
                          DCD      0x40011000

                          AREA ||i.Matrixkey_Init||, CODE, READONLY, ALIGN=2

                  Matrixkey_Init PROC
;;;6      
;;;7      void Matrixkey_Init(void)	  //矩阵键盘初始化函数；PC0~PC3设为输出模式，PC4~PC7设为输入模式
000000  b508              PUSH     {r3,lr}
;;;8      {
;;;9      	GPIO_InitTypeDef GPIO_InitStructure;
;;;10     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC|RCC_APB2Periph_GPIOD|RCC_APB2Periph_GPIOG, ENABLE);	
000002  2101              MOVS     r1,#1
000004  f44f7098          MOV      r0,#0x130
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;11     	
;;;12     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
00000c  200f              MOVS     r0,#0xf
00000e  f8ad0000          STRH     r0,[sp,#0]
;;;13     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000012  2003              MOVS     r0,#3
000014  f88d0002          STRB     r0,[sp,#2]
;;;14     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000018  2010              MOVS     r0,#0x10
00001a  f88d0003          STRB     r0,[sp,#3]
;;;15     	GPIO_Init(GPIOC,&GPIO_InitStructure);
00001e  4669              MOV      r1,sp
000020  481d              LDR      r0,|L2.152|
000022  f7fffffe          BL       GPIO_Init
;;;16     	
;;;17     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
000026  20f0              MOVS     r0,#0xf0
000028  f8ad0000          STRH     r0,[sp,#0]
;;;18     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00002c  2003              MOVS     r0,#3
00002e  f88d0002          STRB     r0,[sp,#2]
;;;19     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
000032  2028              MOVS     r0,#0x28
000034  f88d0003          STRB     r0,[sp,#3]
;;;20     	GPIO_Init(GPIOC,&GPIO_InitStructure);
000038  4669              MOV      r1,sp
00003a  4817              LDR      r0,|L2.152|
00003c  f7fffffe          BL       GPIO_Init
;;;21     	
;;;22     	   /*输出38KHzIO配置*/	
;;;23         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
000040  f44f7080          MOV      r0,#0x100
000044  f8ad0000          STRH     r0,[sp,#0]
;;;24         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000048  2010              MOVS     r0,#0x10
00004a  f88d0003          STRB     r0,[sp,#3]
;;;25         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00004e  2003              MOVS     r0,#3
000050  f88d0002          STRB     r0,[sp,#2]
;;;26         GPIO_Init(GPIOD, &GPIO_InitStructure);
000054  4669              MOV      r1,sp
000056  4811              LDR      r0,|L2.156|
000058  f7fffffe          BL       GPIO_Init
;;;27     	
;;;28     	
;;;29     	
;;;30     	//灯测试来检测矩阵键盘
;;;31     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;			 //板上LED编号 D2
00005c  f44f4080          MOV      r0,#0x4000
000060  f8ad0000          STRH     r0,[sp,#0]
;;;32       	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000064  2010              MOVS     r0,#0x10
000066  f88d0003          STRB     r0,[sp,#3]
;;;33       	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00006a  2003              MOVS     r0,#3
00006c  f88d0002          STRB     r0,[sp,#2]
;;;34       	GPIO_Init(GPIOG, &GPIO_InitStructure);
000070  4669              MOV      r1,sp
000072  480b              LDR      r0,|L2.160|
000074  f7fffffe          BL       GPIO_Init
;;;35     
;;;36     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;			 //板上LED编号 D5
000078  f44f5000          MOV      r0,#0x2000
00007c  f8ad0000          STRH     r0,[sp,#0]
;;;37       	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000080  2010              MOVS     r0,#0x10
000082  f88d0003          STRB     r0,[sp,#3]
;;;38       	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000086  2003              MOVS     r0,#3
000088  f88d0002          STRB     r0,[sp,#2]
;;;39       	GPIO_Init(GPIOD, &GPIO_InitStructure);
00008c  4669              MOV      r1,sp
00008e  4803              LDR      r0,|L2.156|
000090  f7fffffe          BL       GPIO_Init
;;;40     
;;;41     }
000094  bd08              POP      {r3,pc}
;;;42     
                          ENDP

000096  0000              DCW      0x0000
                  |L2.152|
                          DCD      0x40011000
                  |L2.156|
                          DCD      0x40011400
                  |L2.160|
                          DCD      0x40012000

                          AREA ||i.treat_key_value||, CODE, READONLY, ALIGN=2

                  treat_key_value PROC
;;;153    
;;;154    void treat_key_value(unsigned char key_value)
000000  b510              PUSH     {r4,lr}
;;;155    {
000002  4604              MOV      r4,r0
;;;156    	
;;;157    	switch(key_value)
000004  2c36              CMP      r4,#0x36
000006  d07d              BEQ      |L3.260|
000008  dc12              BGT      |L3.48|
00000a  2c32              CMP      r4,#0x32
00000c  d02f              BEQ      |L3.110|
00000e  dc08              BGT      |L3.34|
000010  2c23              CMP      r4,#0x23
000012  d073              BEQ      |L3.252|
000014  2c2a              CMP      r4,#0x2a
000016  d072              BEQ      |L3.254|
000018  2c30              CMP      r4,#0x30
00001a  d071              BEQ      |L3.256|
00001c  2c31              CMP      r4,#0x31
                  |L3.30|
00001e  d170              BNE      |L3.258|
000020  e017              B        |L3.82|
                  |L3.34|
000022  2c33              CMP      r4,#0x33
000024  d031              BEQ      |L3.138|
000026  2c34              CMP      r4,#0x34
000028  d04b              BEQ      |L3.194|
00002a  2c35              CMP      r4,#0x35
00002c  d1f7              BNE      |L3.30|
00002e  e056              B        |L3.222|
                  |L3.48|
000030  2c41              CMP      r4,#0x41
000032  d038              BEQ      |L3.166|
000034  dc06              BGT      |L3.68|
000036  2c37              CMP      r4,#0x37
000038  d072              BEQ      |L3.288|
00003a  2c38              CMP      r4,#0x38
00003c  d071              BEQ      |L3.290|
00003e  2c39              CMP      r4,#0x39
000040  d1ed              BNE      |L3.30|
000042  e09b              B        |L3.380|
                  |L3.68|
000044  2c42              CMP      r4,#0x42
000046  d06f              BEQ      |L3.296|
000048  2c43              CMP      r4,#0x43
00004a  d06c              BEQ      |L3.294|
00004c  2c44              CMP      r4,#0x44
00004e  d1e6              BNE      |L3.30|
000050  e0da              B        |L3.520|
                  |L3.82|
;;;158    	{
;;;159    		case '1':  Write_IRdata(0x00);GPIO_SetBits(GPIOD, GPIO_Pin_13);		GPIO_SetBits(GPIOG, GPIO_Pin_14);break;
000052  2000              MOVS     r0,#0
000054  f7fffffe          BL       Write_IRdata
000058  f44f5100          MOV      r1,#0x2000
00005c  4873              LDR      r0,|L3.556|
00005e  f7fffffe          BL       GPIO_SetBits
000062  f44f4180          MOV      r1,#0x4000
000066  4872              LDR      r0,|L3.560|
000068  f7fffffe          BL       GPIO_SetBits
00006c  e0db              B        |L3.550|
                  |L3.110|
;;;160    		case '2':  Write_IRdata(0x01);GPIO_ResetBits(GPIOD, GPIO_Pin_13);		GPIO_ResetBits(GPIOG, GPIO_Pin_14);break;
00006e  2001              MOVS     r0,#1
000070  f7fffffe          BL       Write_IRdata
000074  f44f5100          MOV      r1,#0x2000
000078  486c              LDR      r0,|L3.556|
00007a  f7fffffe          BL       GPIO_ResetBits
00007e  f44f4180          MOV      r1,#0x4000
000082  486b              LDR      r0,|L3.560|
000084  f7fffffe          BL       GPIO_ResetBits
000088  e0cd              B        |L3.550|
                  |L3.138|
;;;161    		case '3':  Write_IRdata(0x02);GPIO_SetBits(GPIOD, GPIO_Pin_13);		GPIO_SetBits(GPIOG, GPIO_Pin_14);break;
00008a  2002              MOVS     r0,#2
00008c  f7fffffe          BL       Write_IRdata
000090  f44f5100          MOV      r1,#0x2000
000094  4865              LDR      r0,|L3.556|
000096  f7fffffe          BL       GPIO_SetBits
00009a  f44f4180          MOV      r1,#0x4000
00009e  4864              LDR      r0,|L3.560|
0000a0  f7fffffe          BL       GPIO_SetBits
0000a4  e0bf              B        |L3.550|
                  |L3.166|
;;;162    		case 'A':  Write_IRdata(0x03);GPIO_ResetBits(GPIOD, GPIO_Pin_13);		GPIO_ResetBits(GPIOG, GPIO_Pin_14);break;
0000a6  2003              MOVS     r0,#3
0000a8  f7fffffe          BL       Write_IRdata
0000ac  f44f5100          MOV      r1,#0x2000
0000b0  485e              LDR      r0,|L3.556|
0000b2  f7fffffe          BL       GPIO_ResetBits
0000b6  f44f4180          MOV      r1,#0x4000
0000ba  485d              LDR      r0,|L3.560|
0000bc  f7fffffe          BL       GPIO_ResetBits
0000c0  e0b1              B        |L3.550|
                  |L3.194|
;;;163    
;;;164    		case '4':  Write_IRdata(0x04);GPIO_SetBits(GPIOD, GPIO_Pin_13);		GPIO_SetBits(GPIOG, GPIO_Pin_14);break;
0000c2  2004              MOVS     r0,#4
0000c4  f7fffffe          BL       Write_IRdata
0000c8  f44f5100          MOV      r1,#0x2000
0000cc  4857              LDR      r0,|L3.556|
0000ce  f7fffffe          BL       GPIO_SetBits
0000d2  f44f4180          MOV      r1,#0x4000
0000d6  4856              LDR      r0,|L3.560|
0000d8  f7fffffe          BL       GPIO_SetBits
0000dc  e0a3              B        |L3.550|
                  |L3.222|
;;;165    		case '5':  Write_IRdata(0x05);GPIO_ResetBits(GPIOD, GPIO_Pin_13);		GPIO_ResetBits(GPIOG, GPIO_Pin_14);break;
0000de  2005              MOVS     r0,#5
0000e0  f7fffffe          BL       Write_IRdata
0000e4  f44f5100          MOV      r1,#0x2000
0000e8  4850              LDR      r0,|L3.556|
0000ea  f7fffffe          BL       GPIO_ResetBits
0000ee  f44f4180          MOV      r1,#0x4000
0000f2  484f              LDR      r0,|L3.560|
0000f4  f7fffffe          BL       GPIO_ResetBits
0000f8  e095              B        |L3.550|
0000fa  e003              B        |L3.260|
                  |L3.252|
0000fc  e076              B        |L3.492|
                  |L3.254|
0000fe  e059              B        |L3.436|
                  |L3.256|
000100  e066              B        |L3.464|
                  |L3.258|
000102  e08f              B        |L3.548|
                  |L3.260|
;;;166    		case '6':  Write_IRdata(0x06);GPIO_SetBits(GPIOD, GPIO_Pin_13);		GPIO_SetBits(GPIOG, GPIO_Pin_14);break;
000104  2006              MOVS     r0,#6
000106  f7fffffe          BL       Write_IRdata
00010a  f44f5100          MOV      r1,#0x2000
00010e  4847              LDR      r0,|L3.556|
000110  f7fffffe          BL       GPIO_SetBits
000114  f44f4180          MOV      r1,#0x4000
000118  4845              LDR      r0,|L3.560|
00011a  f7fffffe          BL       GPIO_SetBits
00011e  e082              B        |L3.550|
                  |L3.288|
000120  e010              B        |L3.324|
                  |L3.290|
000122  e01d              B        |L3.352|
000124  e000              B        |L3.296|
                  |L3.294|
000126  e037              B        |L3.408|
                  |L3.296|
;;;167    		case 'B':  Write_IRdata(0x07);GPIO_SetBits(GPIOD, GPIO_Pin_13);		GPIO_SetBits(GPIOG, GPIO_Pin_14);break;
000128  2007              MOVS     r0,#7
00012a  f7fffffe          BL       Write_IRdata
00012e  f44f5100          MOV      r1,#0x2000
000132  483e              LDR      r0,|L3.556|
000134  f7fffffe          BL       GPIO_SetBits
000138  f44f4180          MOV      r1,#0x4000
00013c  483c              LDR      r0,|L3.560|
00013e  f7fffffe          BL       GPIO_SetBits
000142  e070              B        |L3.550|
                  |L3.324|
;;;168    
;;;169    		case '7':  Write_IRdata(0x08);GPIO_ResetBits(GPIOD, GPIO_Pin_13);		GPIO_ResetBits(GPIOG, GPIO_Pin_14);break;
000144  2008              MOVS     r0,#8
000146  f7fffffe          BL       Write_IRdata
00014a  f44f5100          MOV      r1,#0x2000
00014e  4837              LDR      r0,|L3.556|
000150  f7fffffe          BL       GPIO_ResetBits
000154  f44f4180          MOV      r1,#0x4000
000158  4835              LDR      r0,|L3.560|
00015a  f7fffffe          BL       GPIO_ResetBits
00015e  e062              B        |L3.550|
                  |L3.352|
;;;170    		case '8':  Write_IRdata(0x09);GPIO_SetBits(GPIOD, GPIO_Pin_13);		GPIO_SetBits(GPIOG, GPIO_Pin_14);break;
000160  2009              MOVS     r0,#9
000162  f7fffffe          BL       Write_IRdata
000166  f44f5100          MOV      r1,#0x2000
00016a  4830              LDR      r0,|L3.556|
00016c  f7fffffe          BL       GPIO_SetBits
000170  f44f4180          MOV      r1,#0x4000
000174  482e              LDR      r0,|L3.560|
000176  f7fffffe          BL       GPIO_SetBits
00017a  e054              B        |L3.550|
                  |L3.380|
;;;171    		case '9':  Write_IRdata(0x0a);GPIO_ResetBits(GPIOD, GPIO_Pin_13);		GPIO_ResetBits(GPIOG, GPIO_Pin_14);break;
00017c  200a              MOVS     r0,#0xa
00017e  f7fffffe          BL       Write_IRdata
000182  f44f5100          MOV      r1,#0x2000
000186  4829              LDR      r0,|L3.556|
000188  f7fffffe          BL       GPIO_ResetBits
00018c  f44f4180          MOV      r1,#0x4000
000190  4827              LDR      r0,|L3.560|
000192  f7fffffe          BL       GPIO_ResetBits
000196  e046              B        |L3.550|
                  |L3.408|
;;;172    		case 'C':  Write_IRdata(0x0b);GPIO_SetBits(GPIOD, GPIO_Pin_13);		GPIO_SetBits(GPIOG, GPIO_Pin_14);break;
000198  200b              MOVS     r0,#0xb
00019a  f7fffffe          BL       Write_IRdata
00019e  f44f5100          MOV      r1,#0x2000
0001a2  4822              LDR      r0,|L3.556|
0001a4  f7fffffe          BL       GPIO_SetBits
0001a8  f44f4180          MOV      r1,#0x4000
0001ac  4820              LDR      r0,|L3.560|
0001ae  f7fffffe          BL       GPIO_SetBits
0001b2  e038              B        |L3.550|
                  |L3.436|
;;;173    
;;;174    		case '*':  Write_IRdata(0x0c);GPIO_ResetBits(GPIOD, GPIO_Pin_13);		GPIO_ResetBits(GPIOG, GPIO_Pin_14);break;
0001b4  200c              MOVS     r0,#0xc
0001b6  f7fffffe          BL       Write_IRdata
0001ba  f44f5100          MOV      r1,#0x2000
0001be  481b              LDR      r0,|L3.556|
0001c0  f7fffffe          BL       GPIO_ResetBits
0001c4  f44f4180          MOV      r1,#0x4000
0001c8  4819              LDR      r0,|L3.560|
0001ca  f7fffffe          BL       GPIO_ResetBits
0001ce  e02a              B        |L3.550|
                  |L3.464|
;;;175    		case '0':  Write_IRdata(0x0d);GPIO_SetBits(GPIOD, GPIO_Pin_13);		GPIO_SetBits(GPIOG, GPIO_Pin_14);break;
0001d0  200d              MOVS     r0,#0xd
0001d2  f7fffffe          BL       Write_IRdata
0001d6  f44f5100          MOV      r1,#0x2000
0001da  4814              LDR      r0,|L3.556|
0001dc  f7fffffe          BL       GPIO_SetBits
0001e0  f44f4180          MOV      r1,#0x4000
0001e4  4812              LDR      r0,|L3.560|
0001e6  f7fffffe          BL       GPIO_SetBits
0001ea  e01c              B        |L3.550|
                  |L3.492|
;;;176    		case '#':  Write_IRdata(0x0e);GPIO_ResetBits(GPIOD, GPIO_Pin_13);		GPIO_ResetBits(GPIOG, GPIO_Pin_14);break;
0001ec  200e              MOVS     r0,#0xe
0001ee  f7fffffe          BL       Write_IRdata
0001f2  f44f5100          MOV      r1,#0x2000
0001f6  480d              LDR      r0,|L3.556|
0001f8  f7fffffe          BL       GPIO_ResetBits
0001fc  f44f4180          MOV      r1,#0x4000
000200  480b              LDR      r0,|L3.560|
000202  f7fffffe          BL       GPIO_ResetBits
000206  e00e              B        |L3.550|
                  |L3.520|
;;;177    		case 'D':  Write_IRdata(0x0f);GPIO_SetBits(GPIOD, GPIO_Pin_13);		GPIO_SetBits(GPIOG, GPIO_Pin_14);break;
000208  200f              MOVS     r0,#0xf
00020a  f7fffffe          BL       Write_IRdata
00020e  f44f5100          MOV      r1,#0x2000
000212  4806              LDR      r0,|L3.556|
000214  f7fffffe          BL       GPIO_SetBits
000218  f44f4180          MOV      r1,#0x4000
00021c  4804              LDR      r0,|L3.560|
00021e  f7fffffe          BL       GPIO_SetBits
000222  e000              B        |L3.550|
                  |L3.548|
;;;178    
;;;179    	   default :break;
000224  bf00              NOP      
                  |L3.550|
000226  bf00              NOP                            ;159
;;;180    	}
;;;181    
;;;182    }
000228  bd10              POP      {r4,pc}
;;;183    
                          ENDP

00022a  0000              DCW      0x0000
                  |L3.556|
                          DCD      0x40011400
                  |L3.560|
                          DCD      0x40012000
