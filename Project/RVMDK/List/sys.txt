; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\sys.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\sys.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\User\inc -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\RVMDK -ID:\keil\ARM\RV31\INC -ID:\keil\ARM\CMSIS\Include -ID:\keil\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=528 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\sys.crf sys.c]
                          THUMB

                          AREA ||i.Delay_init||, CODE, READONLY, ALIGN=2

                  Delay_init PROC
;;;10     //SYSCLK:系统时钟
;;;11     void Delay_init(u8 SYSCLK)
000000  f04f21e0          MOV      r1,#0xe000e000
;;;12     {
;;;13     	SysTick->CTRL&=0xfffffffb;//bit2清空,选择外部时钟  HCLK/8
000004  6909              LDR      r1,[r1,#0x10]
000006  f0210104          BIC      r1,r1,#4
00000a  f04f22e0          MOV      r2,#0xe000e000
00000e  6111              STR      r1,[r2,#0x10]
;;;14     	fac_us=SYSCLK/8;		    
000010  17c2              ASRS     r2,r0,#31
000012  eb007252          ADD      r2,r0,r2,LSR #29
000016  f3c202c7          UBFX     r2,r2,#3,#8
00001a  4b07              LDR      r3,|L1.56|
00001c  701a              STRB     r2,[r3,#0]
;;;15     	fac_ms=(u16)fac_us*1000;
00001e  4619              MOV      r1,r3
000020  7809              LDRB     r1,[r1,#0]  ; fac_us
000022  eb010241          ADD      r2,r1,r1,LSL #1
000026  ebc211c1          RSB      r1,r2,r1,LSL #7
00002a  f64f72ff          MOV      r2,#0xffff
00002e  ea0201c1          AND      r1,r2,r1,LSL #3
000032  4a02              LDR      r2,|L1.60|
000034  8011              STRH     r1,[r2,#0]
;;;16     }	
000036  4770              BX       lr
;;;17     							    
                          ENDP

                  |L1.56|
                          DCD      fac_us
                  |L1.60|
                          DCD      fac_ms

                          AREA ||i.Delay_ms||, CODE, READONLY, ALIGN=2

                  Delay_ms PROC
;;;24     
;;;25     void Delay_ms(u16 nms)
000000  4601              MOV      r1,r0
;;;26     {	 		  	  
;;;27     	u32 temp;		   
;;;28     	SysTick->LOAD=(u32)nms*fac_ms;//时间加载(SysTick->LOAD为24bit)
000002  4a0d              LDR      r2,|L2.56|
000004  8812              LDRH     r2,[r2,#0]  ; fac_ms
000006  434a              MULS     r2,r1,r2
000008  f04f23e0          MOV      r3,#0xe000e000
00000c  615a              STR      r2,[r3,#0x14]
;;;29     	SysTick->VAL =0x00;           //清空计数器
00000e  2200              MOVS     r2,#0
000010  619a              STR      r2,[r3,#0x18]
;;;30     	SysTick->CTRL=0x01 ;          //开始倒数  
000012  2201              MOVS     r2,#1
000014  611a              STR      r2,[r3,#0x10]
;;;31     	do
000016  bf00              NOP      
                  |L2.24|
;;;32     	{
;;;33     		temp=SysTick->CTRL;
000018  f04f22e0          MOV      r2,#0xe000e000
00001c  6910              LDR      r0,[r2,#0x10]
;;;34     	}
;;;35     	while(temp&0x01&&!(temp&(1<<16)));//等待时间到达   
00001e  f0000201          AND      r2,r0,#1
000022  b11a              CBZ      r2,|L2.44|
000024  f4003280          AND      r2,r0,#0x10000
000028  2a00              CMP      r2,#0
00002a  d0f5              BEQ      |L2.24|
                  |L2.44|
;;;36     	SysTick->CTRL=0x00;       //关闭计数器
00002c  2200              MOVS     r2,#0
00002e  f04f23e0          MOV      r3,#0xe000e000
000032  611a              STR      r2,[r3,#0x10]
;;;37     	SysTick->VAL =0X00;       //清空计数器	  	    
000034  619a              STR      r2,[r3,#0x18]
;;;38     }  
000036  4770              BX       lr
;;;39      
                          ENDP

                  |L2.56|
                          DCD      fac_ms

                          AREA ||i.Delay_us||, CODE, READONLY, ALIGN=2

                  Delay_us PROC
;;;41     //nus为要延时的us数.		    							  
;;;42     void Delay_us(u32 nus)
000000  4601              MOV      r1,r0
;;;43     {		
;;;44     	u32 temp;	    	 
;;;45     	SysTick->LOAD=nus*fac_us; //时间加载	  		 
000002  4a0d              LDR      r2,|L3.56|
000004  7812              LDRB     r2,[r2,#0]  ; fac_us
000006  434a              MULS     r2,r1,r2
000008  f04f23e0          MOV      r3,#0xe000e000
00000c  615a              STR      r2,[r3,#0x14]
;;;46     	SysTick->VAL=0x00;        //清空计数器
00000e  2200              MOVS     r2,#0
000010  619a              STR      r2,[r3,#0x18]
;;;47     	SysTick->CTRL=0x01 ;      //开始倒数 	 
000012  2201              MOVS     r2,#1
000014  611a              STR      r2,[r3,#0x10]
;;;48     	do
000016  bf00              NOP      
                  |L3.24|
;;;49     	{
;;;50     		temp=SysTick->CTRL;
000018  f04f22e0          MOV      r2,#0xe000e000
00001c  6910              LDR      r0,[r2,#0x10]
;;;51     	}
;;;52     	while(temp&0x01&&!(temp&(1<<16)));//等待时间到达   
00001e  f0000201          AND      r2,r0,#1
000022  b11a              CBZ      r2,|L3.44|
000024  f4003280          AND      r2,r0,#0x10000
000028  2a00              CMP      r2,#0
00002a  d0f5              BEQ      |L3.24|
                  |L3.44|
;;;53     	SysTick->CTRL=0x00;       //关闭计数器
00002c  2200              MOVS     r2,#0
00002e  f04f23e0          MOV      r3,#0xe000e000
000032  611a              STR      r2,[r3,#0x10]
;;;54     	SysTick->VAL =0X00;       //清空计数器	 
000034  619a              STR      r2,[r3,#0x18]
;;;55     }
000036  4770              BX       lr
;;;56     
                          ENDP

                  |L3.56|
                          DCD      fac_us

                          AREA ||i.NVIC_Config||, CODE, READONLY, ALIGN=1

                  NVIC_Config PROC
;;;85     
;;;86     void NVIC_Config(void)
000000  b508              PUSH     {r3,lr}
;;;87     {
;;;88     //		EXTI_InitTypeDef EXTI_InitStructure;
;;;89     		NVIC_InitTypeDef NVIC_InitStructure;
;;;90     
;;;91     //		NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);	             //分组2：先占优先级0-3，从优先级0-3				 
;;;92     /*---------------------配置外部中断PD2，先占优先级1，从优先级1----------------------------------------*/
;;;93     //		GPIO_EXTILineConfig(GPIO_PortSourceGPIOD, GPIO_PinSource2);	
;;;94     //
;;;95     //		EXTI_InitStructure.EXTI_Line = EXTI_Line2;      		     //--外部中断线,使用第0根
;;;96     //		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;          //--中断模式
;;;97     //		EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;      //--下降沿触发模式
;;;98     //		EXTI_InitStructure.EXTI_LineCmd = DISABLE;              	     //--打开中断
;;;99     //	    EXTI_Init(&EXTI_InitStructure); 						     //--写入对应寄存器中
;;;100    //
;;;101    //		NVIC_InitStructure.NVIC_IRQChannel = EXTI2_IRQn; 			 //--第0个引脚,所以使用0通道
;;;102    //		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;    //--设置中断优先级为2
;;;103    //		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;			 //--设置子优先级为1
;;;104    //		NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;				 //--启用通道
;;;105    //		NVIC_Init(&NVIC_InitStructure); 							 //--写入对应寄存器中  
;;;106    ///*---------------------配置外部中断PC12，先占优先级0，从优先级0----------------------------------------*/		
;;;107    //		GPIO_EXTILineConfig(GPIO_PortSourceGPIOC, GPIO_PinSource12);
;;;108    //
;;;109    //		EXTI_InitStructure.EXTI_Line = EXTI_Line12;      		     //--外部中断线,使用第1根
;;;110    //		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;          //--中断模式
;;;111    //		EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;      //--下降沿触发模式
;;;112    //		EXTI_InitStructure.EXTI_LineCmd = DISABLE;              	     //--打开中断
;;;113    //	    EXTI_Init(&EXTI_InitStructure); 						     //--写入对应寄存器中
;;;114    //
;;;115    //		NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn; 			 //--第一个引脚,所以使用1通道
;;;116    //		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;    //--设置中断优先级为0
;;;117    //		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;			 //--设置子优先级为0
;;;118    //		NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;				 //--启用通道
;;;119    //		NVIC_Init(&NVIC_InitStructure); 							 //--写入对应寄存器中
;;;120    /*---------------------配置定时器2中断，先占优先级1，从优先级1----------------------------------------*/
;;;121    		NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;    //选择为TIM2通道
000002  201c              MOVS     r0,#0x1c
000004  f88d0000          STRB     r0,[sp,#0]
;;;122    		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;   //设置抢占优先级为2
000008  2001              MOVS     r0,#1
00000a  f88d0001          STRB     r0,[sp,#1]
;;;123    		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;    //设置从优先级为0
00000e  f88d0002          STRB     r0,[sp,#2]
;;;124    		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;    //使能TIM2中断
000012  f88d0003          STRB     r0,[sp,#3]
;;;125    		NVIC_Init(&NVIC_InitStructure);
000016  4668              MOV      r0,sp
000018  f7fffffe          BL       NVIC_Init
;;;126    
;;;127    }
00001c  bd08              POP      {r3,pc}
;;;128    
                          ENDP


                          AREA ||i.RCC_Config||, CODE, READONLY, ALIGN=1

                  RCC_Config PROC
;;;56     
;;;57     void RCC_Config(void)
000000  b510              PUSH     {r4,lr}
;;;58     {
;;;59       ErrorStatus HSEStartUpStatus;                    //定义外部高速晶体启动状态枚举变量
;;;60       RCC_DeInit();                                    //复位RCC外部设备寄存器到默认值
000002  f7fffffe          BL       RCC_DeInit
;;;61       RCC_HSEConfig(RCC_HSE_ON);                       //打开外部高速晶振
000006  f44f3080          MOV      r0,#0x10000
00000a  f7fffffe          BL       RCC_HSEConfig
;;;62       HSEStartUpStatus = RCC_WaitForHSEStartUp();      //等待外部高速时钟准备好
00000e  f7fffffe          BL       RCC_WaitForHSEStartUp
000012  4604              MOV      r4,r0
;;;63       if(HSEStartUpStatus == SUCCESS)                  //外部高速时钟已经准别好
000014  2c01              CMP      r4,#1
000016  d124              BNE      |L5.98|
;;;64       {
;;;65         FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable); //开启FLASH预读缓冲功能，加速FLASH的读取。所有程序中必须的用法.位置：RCC初始化子函数里面，时钟起振之后
000018  2010              MOVS     r0,#0x10
00001a  f7fffffe          BL       FLASH_PrefetchBufferCmd
;;;66         FLASH_SetLatency(FLASH_Latency_2);                    //flash操作的延时
00001e  2002              MOVS     r0,#2
000020  f7fffffe          BL       FLASH_SetLatency
;;;67           	
;;;68         RCC_HCLKConfig(RCC_SYSCLK_Div1);               //配置AHB(HCLK)时钟等于==SYSCLK
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       RCC_HCLKConfig
;;;69         RCC_PCLK2Config(RCC_HCLK_Div1);                //配置APB2(PCLK2)钟==AHB时钟
00002a  2000              MOVS     r0,#0
00002c  f7fffffe          BL       RCC_PCLK2Config
;;;70         RCC_PCLK1Config(RCC_HCLK_Div2);                //配置APB1(PCLK1)钟==AHB1/2时钟
000030  02a0              LSLS     r0,r4,#10
000032  f7fffffe          BL       RCC_PCLK1Config
;;;71              
;;;72         RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);  //配置PLL时钟 == 外部高速晶体时钟 * 9 = 72MHz
000036  f44f11e0          MOV      r1,#0x1c0000
00003a  0420              LSLS     r0,r4,#16
00003c  f7fffffe          BL       RCC_PLLConfig
;;;73         RCC_PLLCmd(ENABLE);                                   //使能PLL时钟
000040  2001              MOVS     r0,#1
000042  f7fffffe          BL       RCC_PLLCmd
;;;74        
;;;75         while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)    //等待PLL时钟就绪
000046  bf00              NOP      
                  |L5.72|
000048  2039              MOVS     r0,#0x39
00004a  f7fffffe          BL       RCC_GetFlagStatus
00004e  2800              CMP      r0,#0
000050  d0fa              BEQ      |L5.72|
;;;76         {
;;;77         }
;;;78         RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);            //配置系统时钟 = PLL时钟
000052  2002              MOVS     r0,#2
000054  f7fffffe          BL       RCC_SYSCLKConfig
;;;79         while(RCC_GetSYSCLKSource() != 0x08)                  //检查PLL时钟是否作为系统时钟
000058  bf00              NOP      
                  |L5.90|
00005a  f7fffffe          BL       RCC_GetSYSCLKSource
00005e  2808              CMP      r0,#8
000060  d1fb              BNE      |L5.90|
                  |L5.98|
;;;80         {
;;;81         }
;;;82       }  
;;;83       Delay_init(72);  
000062  2048              MOVS     r0,#0x48
000064  f7fffffe          BL       Delay_init
;;;84     }
000068  bd10              POP      {r4,pc}
;;;85     
                          ENDP


                          AREA ||.data||, DATA, ALIGN=1

                  fac_us
000000  0000              DCB      0x00,0x00
                  fac_ms
000002  0000              DCW      0x0000
