; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\User\inc -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\RVMDK -ID:\keil\ARM\RV31\INC -ID:\keil\ARM\CMSIS\Include -ID:\keil\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=528 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\main.crf ..\..\User\src\main.c]
                          THUMB

                          AREA ||i.GPIO_Configuration||, CODE, READONLY, ALIGN=2

                  GPIO_Configuration PROC
;;;44     /*IO配置*/
;;;45     void GPIO_Configuration(void)
000000  b508              PUSH     {r3,lr}
;;;46     {
;;;47         GPIO_InitTypeDef GPIO_InitStructure; 
;;;48          
;;;49         /*LED指示灯及输出38KHzIO配置*/
;;;50         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
000002  f44f7080          MOV      r0,#0x100
000006  f8ad0000          STRH     r0,[sp,#0]
;;;51         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
00000a  2010              MOVS     r0,#0x10
00000c  f88d0003          STRB     r0,[sp,#3]
;;;52         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000010  2003              MOVS     r0,#3
000012  f88d0002          STRB     r0,[sp,#2]
;;;53         GPIO_Init(GPIOB, &GPIO_InitStructure);
000016  4669              MOV      r1,sp
000018  4801              LDR      r0,|L1.32|
00001a  f7fffffe          BL       GPIO_Init
;;;54     
;;;55     //   	/*zlg7290按键中断输入配置*/
;;;56     //	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
;;;57     //    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;58     //    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
;;;59     //    GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;60     
;;;61     //	/*模拟I2C数据线和时钟线 PB6 SCL and PB7 SDA */  
;;;62     //	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_7;
;;;63     //	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;64     //	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; //固件I2C协议必须用复用开漏输出GPIO_Mode_AF_OD，而模拟I2C用GPIO_Mode_Out_PP，否则不能不出脉冲
;;;65     //	GPIO_Init(GPIOB, &GPIO_InitStructure);
;;;66     
;;;67     }
00001e  bd08              POP      {r3,pc}
;;;68     
                          ENDP

                  |L1.32|
                          DCD      0x40010c00

                          AREA ||i.NVIC_Configuration||, CODE, READONLY, ALIGN=1

                  NVIC_Configuration PROC
;;;107    */
;;;108    void NVIC_Configuration(void)
000000  b508              PUSH     {r3,lr}
;;;109    {
;;;110       NVIC_InitTypeDef NVIC_InitStructure;
;;;111     
;;;112       /* Enable the TIM2 gloabal Interrupt */
;;;113       NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
000002  201d              MOVS     r0,#0x1d
000004  f88d0000          STRB     r0,[sp,#0]
;;;114       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
000008  2001              MOVS     r0,#1
00000a  f88d0001          STRB     r0,[sp,#1]
;;;115       NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
00000e  f88d0002          STRB     r0,[sp,#2]
;;;116       NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000012  f88d0003          STRB     r0,[sp,#3]
;;;117       NVIC_Init(&NVIC_InitStructure);
000016  4668              MOV      r0,sp
000018  f7fffffe          BL       NVIC_Init
;;;118    
;;;119       /* Enable the EXTI13 Interrupt */
;;;120     /*  NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;	//注意9-5，和15-10的中断名称的表示
;;;121       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
;;;122       NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
;;;123       NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;124       NVIC_Init(&NVIC_InitStructure);
;;;125    */
;;;126       
;;;127    }
00001c  bd08              POP      {r3,pc}
;;;128    
                          ENDP


                          AREA ||i.RCC_Configuration||, CODE, READONLY, ALIGN=1

                  RCC_Configuration PROC
;;;32     /*开IO时钟*/
;;;33     void RCC_Configuration(void)
000000  b510              PUSH     {r4,lr}
;;;34     {
;;;35        /* TIM3 clock enable */
;;;36        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
000002  2101              MOVS     r1,#1
000004  2002              MOVS     r0,#2
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;37      
;;;38        /* GPIO_x clock enable */
;;;39        RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA |RCC_APB2Periph_GPIOB , ENABLE);
00000a  2101              MOVS     r1,#1
00000c  200c              MOVS     r0,#0xc
00000e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;40                               
;;;41     }
000012  bd10              POP      {r4,pc}
;;;42     
                          ENDP


                          AREA ||i.TIM_Configuration||, CODE, READONLY, ALIGN=2

                  TIM_Configuration PROC
;;;138    /*定时器TIM3配置*/
;;;139    void TIM_Configuration(void)  
000000  b510              PUSH     {r4,lr}
;;;140    {
;;;141    	/* Time base configuration */ 
;;;142       TIM_TimeBaseStructure.TIM_Period = 235; //周期（计数到该值后产生更新或中断，即定时时间到）
000002  20eb              MOVS     r0,#0xeb
000004  490b              LDR      r1,|L4.52|
000006  8088              STRH     r0,[r1,#4]
;;;143       TIM_TimeBaseStructure.TIM_Prescaler = 3; //设置了用来作为TIM3时钟频率除数的预分频值
000008  2003              MOVS     r0,#3
00000a  8008              STRH     r0,[r1,#0]
;;;144       			//这是计数周期的倍频计数器，相当于调节计数周期，可使Period尽量大，提高计数精度（该值越大，频率越小，周期越大）
;;;145    			/*  计数时钟 = 72M / (3+1) / (235+1) = 	76KHz(即13.15us进一次定时器中断)
;;;146    				所以一个周期的频率 = 76 / 2 = 38KHz */		       // yinggai shi yizhi zai fangwen
;;;147       TIM_TimeBaseStructure.TIM_ClockDivision = 0;	//时钟分割
00000c  2000              MOVS     r0,#0
00000e  80c8              STRH     r0,[r1,#6]
;;;148       TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up; //向上计数
000010  8048              STRH     r0,[r1,#2]
;;;149       TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure); //基本初始化
000012  4809              LDR      r0,|L4.56|
000014  f7fffffe          BL       TIM_TimeBaseInit
;;;150    	
;;;151    	/* Prescaler configuration */
;;;152       //TIM_PrescalerConfig(TIM3, 7199, TIM_PSCReloadMode_Immediate);  //相当于TIM_Prescaler的值 
;;;153    
;;;154       TIM_ITConfig(TIM3, TIM_IT_Update , ENABLE );  //打开通道中断，中断需要这行代码（另外再配置NVIC中断即可）
000018  2201              MOVS     r2,#1
00001a  4611              MOV      r1,r2
00001c  4806              LDR      r0,|L4.56|
00001e  f7fffffe          BL       TIM_ITConfig
;;;155       //也可用TIM_ITConfig(TIM3, TIM_IT_CC1 , ENABLE ); //也可用其他通道，但是中断子函数也要相应改变
;;;156       /* TIM3 enable counter */
;;;157       TIM_Cmd(TIM3, ENABLE);  //启动定时器3
000022  2101              MOVS     r1,#1
000024  4804              LDR      r0,|L4.56|
000026  f7fffffe          BL       TIM_Cmd
;;;158    	TIM_SetCompare1(TIM3,49);  //i值最大可以取235，因为ARR最大值是235
00002a  2131              MOVS     r1,#0x31
00002c  4802              LDR      r0,|L4.56|
00002e  f7fffffe          BL       TIM_SetCompare1
;;;159    }
000032  bd10              POP      {r4,pc}
;;;160    
                          ENDP

                  |L4.52|
                          DCD      TIM_TimeBaseStructure
                  |L4.56|
                          DCD      0x40000400

                          AREA ||i.delay||, CODE, READONLY, ALIGN=1

                  delay PROC
;;;25     /*延时，满足两次发送间的时间*/
;;;26     void delay(unsigned int num)
000000  bf00              NOP      
                  |L5.2|
;;;27     {
;;;28     	while(num--);	
000002  1e01              SUBS     r1,r0,#0
000004  f1a00001          SUB      r0,r0,#1
000008  d1fb              BNE      |L5.2|
;;;29     }
00000a  4770              BX       lr
;;;30     
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;182    
;;;183    int main(void)
000000  2000              MOVS     r0,#0
;;;184    {	
;;;185    	unsigned char key_value;
;;;186    	ZLG_flag = 0;
000002  490b              LDR      r1,|L6.48|
000004  6008              STR      r0,[r1,#0]  ; ZLG_flag
;;;187    	/* Setup STM32 system (clock, PLL and Flash configuration) */
;;;188    	SystemInit();
000006  f7fffffe          BL       SystemInit
;;;189    
;;;190    	/* Add your application code here	*/
;;;191    	RCC_Configuration();  //开启TIM3时钟
00000a  f7fffffe          BL       RCC_Configuration
;;;192    	RCC_Config();    //--配置系统主频为72MHz
00000e  f7fffffe          BL       RCC_Config
;;;193    //	Matrixkey_Init();//矩阵键盘和红外发射端
;;;194    	NVIC_Configuration(); //TIM3中断配置
000012  f7fffffe          BL       NVIC_Configuration
;;;195      GPIO_Configuration();  /*IO配置*/
000016  f7fffffe          BL       GPIO_Configuration
;;;196    	TIM_Configuration();  /*定时器TIM3配置*/
00001a  f7fffffe          BL       TIM_Configuration
;;;197    	
;;;198    //	GPIO_ResetBits(GPIOD,GPIO_Pin_8);
;;;199    //	D_value=GPIO_ReadOutputDataBit(GPIOD,GPIO_Pin_8);
;;;200    
;;;201    //	EXTI_Configuration();
;;;202    
;;;203    	
;;;204    //		GPIO_ResetBits(GPIOD, GPIO_Pin_13);
;;;205    //		GPIO_ResetBits(GPIOG, GPIO_Pin_14);
;;;206    	
;;;207    	while (1)
00001e  e005              B        |L6.44|
                  |L6.32|
;;;208    	{		
;;;209    		
;;;210    		  Write_IRdata(0x12);
000020  2012              MOVS     r0,#0x12
000022  f7fffffe          BL       Write_IRdata
;;;211    			Delay_ms(200);
000026  20c8              MOVS     r0,#0xc8
000028  f7fffffe          BL       Delay_ms
                  |L6.44|
00002c  e7f8              B        |L6.32|
;;;212    //		  delay(60000);
;;;213    				
;;;214    //				key_value=Get_KeyValue();	
;;;215     // 		  treat_key_value(key_value);
;;;216    //			  delay(60000);
;;;217    				
;;;218    			
;;;219    
;;;220    //		if(ZLG_flag == 1)
;;;221    //		{
;;;222    //			ZLG_flag=0;
;;;223    //			treat_zlg7290();
;;;224    			//delay(60000); //延时，满足两次发送间的时间
;;;225    //		}
;;;226    	}
;;;227    }
;;;228    
                          ENDP

00002e  0000              DCW      0x0000
                  |L6.48|
                          DCD      ZLG_flag

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  TIM_TimeBaseStructure
                          %        10

                          AREA ||.data||, DATA, ALIGN=2

                  ZLG_flag
                          DCD      0x00000000

                  __ARM_use_no_argv EQU 0
