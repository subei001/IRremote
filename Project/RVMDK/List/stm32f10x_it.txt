; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_it.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\stm32f10x_it.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\User\inc -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\RVMDK -ID:\keil\ARM\RV31\INC -ID:\keil\ARM\CMSIS\Include -ID:\keil\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=528 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\stm32f10x_it.crf ..\..\User\src\stm32f10x_it.c]
                          THUMB

                          AREA ||i.BusFault_Handler||, CODE, READONLY, ALIGN=1

                  BusFault_Handler PROC
;;;81       */
;;;82     void BusFault_Handler(void)
000000  bf00              NOP      
                  |L1.2|
;;;83     {
;;;84       /* Go to infinite loop when Bus Fault exception occurs */
;;;85       while (1)
000002  e7fe              B        |L1.2|
;;;86       {
;;;87       }
;;;88     }
;;;89     
                          ENDP


                          AREA ||i.DebugMon_Handler||, CODE, READONLY, ALIGN=1

                  DebugMon_Handler PROC
;;;116      */
;;;117    void DebugMon_Handler(void)
000000  4770              BX       lr
;;;118    {
;;;119    }
;;;120    
                          ENDP


                          AREA ||i.EXTI15_10_IRQHandler||, CODE, READONLY, ALIGN=2

                  EXTI15_10_IRQHandler PROC
;;;166    
;;;167    void EXTI15_10_IRQHandler(void)	 //注意9-5，和15-10的中断名称的表示
000000  b510              PUSH     {r4,lr}
;;;168    {
;;;169    	if(EXTI_GetITStatus(EXTI_Line13) != RESET) //检查指定的EXTI线路13触发请求发生与否
000002  f44f5000          MOV      r0,#0x2000
000006  f7fffffe          BL       EXTI_GetITStatus
00000a  b128              CBZ      r0,|L3.24|
;;;170    	{
;;;171    		ZLG_flag=1;
00000c  2001              MOVS     r0,#1
00000e  4903              LDR      r1,|L3.28|
000010  6008              STR      r0,[r1,#0]  ; ZLG_flag
;;;172    		//GPIO_WriteBit(GPIOD, GPIO_Pin_9, (BitAction)(1-GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_9)));
;;;173    		//GPIO_SetBits(GPIOD, GPIO_Pin_10|GPIO_Pin_9|GPIO_Pin_11);
;;;174    		EXTI_ClearITPendingBit(EXTI_Line13);	
000012  0340              LSLS     r0,r0,#13
000014  f7fffffe          BL       EXTI_ClearITPendingBit
                  |L3.24|
;;;175    	}
;;;176    }
000018  bd10              POP      {r4,pc}
;;;177    
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      ZLG_flag

                          AREA ||i.HardFault_Handler||, CODE, READONLY, ALIGN=1

                  HardFault_Handler PROC
;;;55       */
;;;56     void HardFault_Handler(void)
000000  bf00              NOP      
                  |L4.2|
;;;57     {
;;;58       /* Go to infinite loop when Hard Fault exception occurs */
;;;59       while (1)
000002  e7fe              B        |L4.2|
;;;60       {
;;;61       }
;;;62     }
;;;63     
                          ENDP


                          AREA ||i.MemManage_Handler||, CODE, READONLY, ALIGN=1

                  MemManage_Handler PROC
;;;68       */
;;;69     void MemManage_Handler(void)
000000  bf00              NOP      
                  |L5.2|
;;;70     {
;;;71       /* Go to infinite loop when Memory Manage exception occurs */
;;;72       while (1)
000002  e7fe              B        |L5.2|
;;;73       {
;;;74       }
;;;75     }
;;;76     
                          ENDP


                          AREA ||i.NMI_Handler||, CODE, READONLY, ALIGN=1

                  NMI_Handler PROC
;;;46       */
;;;47     void NMI_Handler(void)
000000  4770              BX       lr
;;;48     {
;;;49     }
;;;50     
                          ENDP


                          AREA ||i.PendSV_Handler||, CODE, READONLY, ALIGN=1

                  PendSV_Handler PROC
;;;125      */
;;;126    void PendSV_Handler(void)
000000  4770              BX       lr
;;;127    {
;;;128    }
;;;129    
                          ENDP


                          AREA ||i.SVC_Handler||, CODE, READONLY, ALIGN=1

                  SVC_Handler PROC
;;;107      */
;;;108    void SVC_Handler(void)
000000  4770              BX       lr
;;;109    {
;;;110    }
;;;111    
                          ENDP


                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=1

                  SysTick_Handler PROC
;;;134      */
;;;135    void SysTick_Handler(void)
000000  4770              BX       lr
;;;136    {
;;;137    }
;;;138    
                          ENDP


                          AREA ||i.TIM3_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM3_IRQHandler PROC
;;;143    */
;;;144    void TIM3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;145    {
;;;146       if (TIM_GetITStatus(TIM3, TIM_IT_Update) == SET)
000002  2101              MOVS     r1,#1
000004  4812              LDR      r0,|L10.80|
000006  f7fffffe          BL       TIM_GetITStatus
00000a  2801              CMP      r0,#1
00000c  d11f              BNE      |L10.78|
;;;147       {
;;;148     	 count++;
00000e  4811              LDR      r0,|L10.84|
000010  6800              LDR      r0,[r0,#0]  ; count
000012  1c40              ADDS     r0,r0,#1
000014  490f              LDR      r1,|L10.84|
000016  6008              STR      r0,[r1,#0]  ; count
;;;149    	 if(IR_flag == 1)	//IR_flag = 1时，发送载波
000018  480f              LDR      r0,|L10.88|
00001a  7800              LDRB     r0,[r0,#0]  ; IR_flag
00001c  2801              CMP      r0,#1
00001e  d10d              BNE      |L10.60|
;;;150    	 {
;;;151    		GPIO_WriteBit(GPIOB, GPIO_Pin_8, (BitAction)(1-GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_8)));  //该引脚也作为38K脉冲的输出
000020  0201              LSLS     r1,r0,#8
000022  480e              LDR      r0,|L10.92|
000024  f7fffffe          BL       GPIO_ReadOutputDataBit
000028  f1c00001          RSB      r0,r0,#1
00002c  b2c4              UXTB     r4,r0
00002e  4622              MOV      r2,r4
000030  f44f7180          MOV      r1,#0x100
000034  4809              LDR      r0,|L10.92|
000036  f7fffffe          BL       GPIO_WriteBit
00003a  e004              B        |L10.70|
                  |L10.60|
;;;152    	 }
;;;153    	 else GPIO_ResetBits(GPIOB,GPIO_Pin_8);	 //IR_flag = 0时，发送低电平
00003c  f44f7180          MOV      r1,#0x100
000040  4806              LDR      r0,|L10.92|
000042  f7fffffe          BL       GPIO_ResetBits
                  |L10.70|
;;;154         TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
000046  2101              MOVS     r1,#1
000048  4801              LDR      r0,|L10.80|
00004a  f7fffffe          BL       TIM_ClearITPendingBit
                  |L10.78|
;;;155    
;;;156       }
;;;157    }
00004e  bd10              POP      {r4,pc}
;;;158    
                          ENDP

                  |L10.80|
                          DCD      0x40000400
                  |L10.84|
                          DCD      count
                  |L10.88|
                          DCD      IR_flag
                  |L10.92|
                          DCD      0x40010c00

                          AREA ||i.UsageFault_Handler||, CODE, READONLY, ALIGN=1

                  UsageFault_Handler PROC
;;;94       */
;;;95     void UsageFault_Handler(void)
000000  bf00              NOP      
                  |L11.2|
;;;96     {
;;;97       /* Go to infinite loop when Usage Fault exception occurs */
;;;98       while (1)
000002  e7fe              B        |L11.2|
;;;99       {
;;;100      }
;;;101    }
;;;102    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  count
                          DCD      0x00000000
