; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\zlg_7290.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\zlg_7290.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\User\inc -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\RVMDK -ID:\keil\ARM\RV31\INC -ID:\keil\ARM\CMSIS\Include -ID:\keil\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=528 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\zlg_7290.crf ..\..\User\src\ZLG_7290.c]
                          THUMB

                          AREA ||i.I2C_ZLG7209_Ack||, CODE, READONLY, ALIGN=2

                  I2C_ZLG7209_Ack PROC
;;;79     *************************************************************************/
;;;80     void I2C_ZLG7209_Ack(unsigned char a)
000000  b510              PUSH     {r4,lr}
;;;81     {
000002  4604              MOV      r4,r0
;;;82       if(a==0){SDA_0_ZLG7290();}
000004  b924              CBNZ     r4,|L1.16|
000006  f44f0000          MOV      r0,#0x800000
00000a  490d              LDR      r1,|L1.64|
00000c  6008              STR      r0,[r1,#0]
00000e  e002              B        |L1.22|
                  |L1.16|
;;;83       else {SDA_1_ZLG7290();}
000010  2080              MOVS     r0,#0x80
000012  490b              LDR      r1,|L1.64|
000014  6008              STR      r0,[r1,#0]
                  |L1.22|
;;;84       _delay_us(50);//50微秒
000016  2032              MOVS     r0,#0x32
000018  f7fffffe          BL       _delay_us
;;;85       
;;;86       SCL_1_ZLG7290();
00001c  2040              MOVS     r0,#0x40
00001e  4908              LDR      r1,|L1.64|
000020  6008              STR      r0,[r1,#0]
;;;87       _delay_us(50);//50微秒
000022  2032              MOVS     r0,#0x32
000024  f7fffffe          BL       _delay_us
;;;88     
;;;89       SCL_0_ZLG7290();
000028  f44f0080          MOV      r0,#0x400000
00002c  4904              LDR      r1,|L1.64|
00002e  6008              STR      r0,[r1,#0]
;;;90       _delay_us(50);//50微秒
000030  2032              MOVS     r0,#0x32
000032  f7fffffe          BL       _delay_us
;;;91       SDA_1_ZLG7290();
000036  2080              MOVS     r0,#0x80
000038  4901              LDR      r1,|L1.64|
00003a  6008              STR      r0,[r1,#0]
;;;92     }
00003c  bd10              POP      {r4,pc}
;;;93     
                          ENDP

00003e  0000              DCW      0x0000
                  |L1.64|
                          DCD      0x40010c10

                          AREA ||i.ReadByte_ZLG7290||, CODE, READONLY, ALIGN=2

                  ReadByte_ZLG7290 PROC
;;;146    *************************************************/
;;;147    unsigned int ReadByte_ZLG7290(void) //先读高位
000000  b570              PUSH     {r4-r6,lr}
;;;148    {
;;;149    	unsigned int i,a=0;
000002  2400              MOVS     r4,#0
;;;150    
;;;151    	SDA_1_ZLG7290(); //在读取数据之前，要把SDA拉高
000004  2080              MOVS     r0,#0x80
000006  491d              LDR      r1,|L2.124|
000008  6008              STR      r0,[r1,#0]
;;;152    	_delay_us(50);
00000a  2032              MOVS     r0,#0x32
00000c  f7fffffe          BL       _delay_us
;;;153    
;;;154    	GPIO_ZLG7290_Config_PB7_InPut();//设置sda为输入上拉
000010  f7fffffe          BL       GPIO_ZLG7290_Config_PB7_InPut
;;;155    //	GPIOB->CRL&=0X0FFFFFFF;//先保存其他位不变
;;;156    //	GPIOB->CRL|=0X8000000;//PB7浮空输入
;;;157    
;;;158    	for(i=0;i<8;i++)
000014  2500              MOVS     r5,#0
000016  e016              B        |L2.70|
                  |L2.24|
;;;159    	{		
;;;160    		a<<=1;
000018  0064              LSLS     r4,r4,#1
;;;161    		SCL_1_ZLG7290();
00001a  2040              MOVS     r0,#0x40
00001c  4917              LDR      r1,|L2.124|
00001e  6008              STR      r0,[r1,#0]
;;;162    		_delay_us(50);
000020  2032              MOVS     r0,#0x32
000022  f7fffffe          BL       _delay_us
;;;163    				
;;;164    		if(GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_7))
000026  2180              MOVS     r1,#0x80
000028  4814              LDR      r0,|L2.124|
00002a  3810              SUBS     r0,r0,#0x10
00002c  f7fffffe          BL       GPIO_ReadInputDataBit
000030  b108              CBZ      r0,|L2.54|
;;;165    		{
;;;166    			a|=0x01;
000032  f0440401          ORR      r4,r4,#1
                  |L2.54|
;;;167    		} 
;;;168    		SCL_0_ZLG7290();
000036  f44f0080          MOV      r0,#0x400000
00003a  4910              LDR      r1,|L2.124|
00003c  6008              STR      r0,[r1,#0]
;;;169    		_delay_us(50);
00003e  2032              MOVS     r0,#0x32
000040  f7fffffe          BL       _delay_us
000044  1c6d              ADDS     r5,r5,#1              ;158
                  |L2.70|
000046  2d08              CMP      r5,#8                 ;158
000048  d3e6              BCC      |L2.24|
;;;170    	}
;;;171    
;;;172    	GPIO_ZLG7290_Config_OutPut();//设置sda为输出
00004a  f7fffffe          BL       GPIO_ZLG7290_Config_OutPut
;;;173    	GPIOB->CRL&=0X0FFFFFFF;//先保存其他位不变
00004e  480b              LDR      r0,|L2.124|
000050  3810              SUBS     r0,r0,#0x10
000052  6800              LDR      r0,[r0,#0]
000054  f0204070          BIC      r0,r0,#0xf0000000
000058  4908              LDR      r1,|L2.124|
00005a  3910              SUBS     r1,r1,#0x10
00005c  6008              STR      r0,[r1,#0]
;;;174    	GPIOB->CRL|=0X30000000;//PB7 通用推挽输出模式 50MHz
00005e  4608              MOV      r0,r1
000060  6800              LDR      r0,[r0,#0]
000062  f0405040          ORR      r0,r0,#0x30000000
000066  6008              STR      r0,[r1,#0]
;;;175    
;;;176    	SCL_0_ZLG7290();
000068  f44f0080          MOV      r0,#0x400000
00006c  4903              LDR      r1,|L2.124|
00006e  6008              STR      r0,[r1,#0]
;;;177    	_delay_us(50);
000070  2032              MOVS     r0,#0x32
000072  f7fffffe          BL       _delay_us
;;;178    
;;;179    	return(a);	
000076  4620              MOV      r0,r4
;;;180    }
000078  bd70              POP      {r4-r6,pc}
;;;181    
                          ENDP

00007a  0000              DCW      0x0000
                  |L2.124|
                          DCD      0x40010c10

                          AREA ||i.Read_ZLG7290||, CODE, READONLY, ALIGN=1

                  Read_ZLG7290 PROC
;;;189    ******************************************************************/
;;;190    unsigned int Read_ZLG7290(void)
000000  b510              PUSH     {r4,lr}
;;;191    {
;;;192    	unsigned int key=0; //读取键值
000002  2400              MOVS     r4,#0
;;;193    	
;;;194    	Start_ZLG7290();              //启动总线
000004  f7fffffe          BL       Start_ZLG7290
;;;195    
;;;196    	WriteByte_ZLG7290(Write_Addr);//写从器件地址 
000008  2070              MOVS     r0,#0x70
00000a  f7fffffe          BL       WriteByte_ZLG7290
;;;197    	//I2C_ZLG7209_Ack(0);          //发送应答	//加入后，键盘不能读取（卡死）
;;;198    	WriteByte_ZLG7290(0x01);     //写从器件寄存器
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       WriteByte_ZLG7290
;;;199    	//I2C_ZLG7209_Ack(0);          //发送应答
;;;200     
;;;201    	Start_ZLG7290();             //重新启动总线
000014  f7fffffe          BL       Start_ZLG7290
;;;202    	WriteByte_ZLG7290(Read_Addr);//读从器件地址
000018  2071              MOVS     r0,#0x71
00001a  f7fffffe          BL       WriteByte_ZLG7290
;;;203    	//I2C_ZLG7209_Ack(0);         //发送应答
;;;204    	
;;;205    	key =ReadByte_ZLG7290();    //读键值
00001e  f7fffffe          BL       ReadByte_ZLG7290
000022  4604              MOV      r4,r0
;;;206    	I2C_ZLG7209_Ack(1);//非应答信号   
000024  2001              MOVS     r0,#1
000026  f7fffffe          BL       I2C_ZLG7209_Ack
;;;207    
;;;208    	Stop_ZLG7290();          	//关闭总线
00002a  f7fffffe          BL       Stop_ZLG7290
;;;209    								
;;;210    	return(key);
00002e  4620              MOV      r0,r4
;;;211    } 	
000030  bd10              POP      {r4,pc}
;;;212    
                          ENDP


                          AREA ||i.Start_ZLG7290||, CODE, READONLY, ALIGN=2

                  Start_ZLG7290 PROC
;;;39     *************************************************/
;;;40     void Start_ZLG7290(void)
000000  b500              PUSH     {lr}
;;;41     {
;;;42     	SDA_1_ZLG7290();
000002  2080              MOVS     r0,#0x80
000004  490a              LDR      r1,|L4.48|
000006  6008              STR      r0,[r1,#0]
;;;43     	SCL_1_ZLG7290();
000008  2040              MOVS     r0,#0x40
00000a  6008              STR      r0,[r1,#0]
;;;44     	_delay_us(100);	 //100us
00000c  2064              MOVS     r0,#0x64
00000e  f7fffffe          BL       _delay_us
;;;45     	SDA_0_ZLG7290();
000012  f44f0000          MOV      r0,#0x800000
000016  4906              LDR      r1,|L4.48|
000018  6008              STR      r0,[r1,#0]
;;;46     	_delay_us(100);
00001a  2064              MOVS     r0,#0x64
00001c  f7fffffe          BL       _delay_us
;;;47     	SCL_0_ZLG7290();
000020  f44f0080          MOV      r0,#0x400000
000024  4902              LDR      r1,|L4.48|
000026  6008              STR      r0,[r1,#0]
;;;48     	_delay_us(100);
000028  2064              MOVS     r0,#0x64
00002a  f7fffffe          BL       _delay_us
;;;49     }
00002e  bd00              POP      {pc}
;;;50     
                          ENDP

                  |L4.48|
                          DCD      0x40010c10

                          AREA ||i.Stop_ZLG7290||, CODE, READONLY, ALIGN=2

                  Stop_ZLG7290 PROC
;;;57     *************************************************/
;;;58     void Stop_ZLG7290(void)
000000  b500              PUSH     {lr}
;;;59     {
;;;60     	SCL_1_ZLG7290();
000002  2040              MOVS     r0,#0x40
000004  490a              LDR      r1,|L5.48|
000006  6008              STR      r0,[r1,#0]
;;;61     	SDA_0_ZLG7290();
000008  0440              LSLS     r0,r0,#17
00000a  6008              STR      r0,[r1,#0]
;;;62     	_delay_us(100);
00000c  2064              MOVS     r0,#0x64
00000e  f7fffffe          BL       _delay_us
;;;63     	SDA_1_ZLG7290();
000012  2080              MOVS     r0,#0x80
000014  4906              LDR      r1,|L5.48|
000016  6008              STR      r0,[r1,#0]
;;;64     	_delay_us(100);
000018  2064              MOVS     r0,#0x64
00001a  f7fffffe          BL       _delay_us
;;;65     	SCL_0_ZLG7290();
00001e  f44f0080          MOV      r0,#0x400000
000022  4903              LDR      r1,|L5.48|
000024  6008              STR      r0,[r1,#0]
;;;66     	_delay_us(100);
000026  2064              MOVS     r0,#0x64
000028  f7fffffe          BL       _delay_us
;;;67     }
00002c  bd00              POP      {pc}
;;;68     
                          ENDP

00002e  0000              DCW      0x0000
                  |L5.48|
                          DCD      0x40010c10

                          AREA ||i.WriteByte_ZLG7290||, CODE, READONLY, ALIGN=2

                  WriteByte_ZLG7290 PROC
;;;101    *************************************************/
;;;102    void WriteByte_ZLG7290(unsigned int data)	//先发高位
000000  b570              PUSH     {r4-r6,lr}
;;;103    {
000002  4604              MOV      r4,r0
;;;104    	unsigned int i;
;;;105    	SCL_0_ZLG7290();	//时钟线为低电平时,数据线可以改变
000004  f44f0080          MOV      r0,#0x400000
000008  4926              LDR      r1,|L6.164|
00000a  6008              STR      r0,[r1,#0]
;;;106    	for(i=0;i<8;i++)
00000c  2500              MOVS     r5,#0
00000e  e01c              B        |L6.74|
                  |L6.16|
;;;107    	{		
;;;108    		if(data & 0X80)   
000010  f0040080          AND      r0,r4,#0x80
000014  b118              CBZ      r0,|L6.30|
;;;109    		{
;;;110    			SDA_1_ZLG7290();
000016  2080              MOVS     r0,#0x80
000018  4922              LDR      r1,|L6.164|
00001a  6008              STR      r0,[r1,#0]
00001c  e003              B        |L6.38|
                  |L6.30|
;;;111    		}
;;;112    		else           
;;;113    		{
;;;114    			SDA_0_ZLG7290();
00001e  f44f0000          MOV      r0,#0x800000
000022  4920              LDR      r1,|L6.164|
000024  6008              STR      r0,[r1,#0]
                  |L6.38|
;;;115    		}
;;;116    		_delay_us(50);
000026  2032              MOVS     r0,#0x32
000028  f7fffffe          BL       _delay_us
;;;117    		SCL_1_ZLG7290();
00002c  2040              MOVS     r0,#0x40
00002e  491d              LDR      r1,|L6.164|
000030  6008              STR      r0,[r1,#0]
;;;118    		_delay_us(100);
000032  2064              MOVS     r0,#0x64
000034  f7fffffe          BL       _delay_us
;;;119    		SCL_0_ZLG7290();
000038  f44f0080          MOV      r0,#0x400000
00003c  4919              LDR      r1,|L6.164|
00003e  6008              STR      r0,[r1,#0]
;;;120    		data<<=1;
000040  0064              LSLS     r4,r4,#1
;;;121    		_delay_us(50);
000042  2032              MOVS     r0,#0x32
000044  f7fffffe          BL       _delay_us
000048  1c6d              ADDS     r5,r5,#1              ;106
                  |L6.74|
00004a  2d08              CMP      r5,#8                 ;106
00004c  d3e0              BCC      |L6.16|
;;;122    	}
;;;123    	SDA_1_ZLG7290();
00004e  2080              MOVS     r0,#0x80
000050  4914              LDR      r1,|L6.164|
000052  6008              STR      r0,[r1,#0]
;;;124    	_delay_us(50);
000054  2032              MOVS     r0,#0x32
000056  f7fffffe          BL       _delay_us
;;;125    	SCL_1_ZLG7290();
00005a  2040              MOVS     r0,#0x40
00005c  4911              LDR      r1,|L6.164|
00005e  6008              STR      r0,[r1,#0]
;;;126    	_delay_us(50);
000060  2032              MOVS     r0,#0x32
000062  f7fffffe          BL       _delay_us
;;;127    
;;;128    //	GPIOB->CRL&=0X0FFFFFFF;//先保存其他位不变	//因为不知如配置GPIO_Speed，所以测试不成功
;;;129    //	GPIOB->CRL|=0X8000000;//PB7浮空输入
;;;130    	GPIO_ZLG7290_Config_PB7_InPut();//设置sda为输入上拉
000066  f7fffffe          BL       GPIO_ZLG7290_Config_PB7_InPut
;;;131    	while( GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_7) );	//等待应答
00006a  bf00              NOP      
                  |L6.108|
00006c  2180              MOVS     r1,#0x80
00006e  480d              LDR      r0,|L6.164|
000070  3810              SUBS     r0,r0,#0x10
000072  f7fffffe          BL       GPIO_ReadInputDataBit
000076  2800              CMP      r0,#0
000078  d1f8              BNE      |L6.108|
;;;132    //	GPIO_ZLG7290_Config_OutPut();//设置sda为输出
;;;133    	GPIOB->CRL&=0X0FFFFFFF;//先保存其他位不变		   //用上面那句也可以
00007a  480a              LDR      r0,|L6.164|
00007c  3810              SUBS     r0,r0,#0x10
00007e  6800              LDR      r0,[r0,#0]
000080  f0204070          BIC      r0,r0,#0xf0000000
000084  4907              LDR      r1,|L6.164|
000086  3910              SUBS     r1,r1,#0x10
000088  6008              STR      r0,[r1,#0]
;;;134    	GPIOB->CRL|=0X30000000;//PB7 通用推挽输出模式 50MHz
00008a  4608              MOV      r0,r1
00008c  6800              LDR      r0,[r0,#0]
00008e  f0405040          ORR      r0,r0,#0x30000000
000092  6008              STR      r0,[r1,#0]
;;;135    
;;;136    	SCL_0_ZLG7290();
000094  f44f0080          MOV      r0,#0x400000
000098  4902              LDR      r1,|L6.164|
00009a  6008              STR      r0,[r1,#0]
;;;137    	_delay_us(50);
00009c  2032              MOVS     r0,#0x32
00009e  f7fffffe          BL       _delay_us
;;;138    }
0000a2  bd70              POP      {r4-r6,pc}
;;;139    
                          ENDP

                  |L6.164|
                          DCD      0x40010c10

                          AREA ||i._delay_us||, CODE, READONLY, ALIGN=1

                  _delay_us PROC
;;;26     ********************************************************************************/
;;;27     void _delay_us(unsigned int n)	  //1us*n
000000  2100              MOVS     r1,#0
;;;28     {
;;;29         unsigned int i,j;
;;;30     	for(i=0; i<n; i++)
000002  e005              B        |L7.16|
                  |L7.4|
;;;31     	   for(j=0; j<5; j++);
000004  2200              MOVS     r2,#0
000006  e000              B        |L7.10|
                  |L7.8|
000008  1c52              ADDS     r2,r2,#1
                  |L7.10|
00000a  2a05              CMP      r2,#5
00000c  d3fc              BCC      |L7.8|
00000e  1c49              ADDS     r1,r1,#1              ;30
                  |L7.16|
000010  4281              CMP      r1,r0                 ;30
000012  d3f7              BCC      |L7.4|
;;;32     }
000014  4770              BX       lr
;;;33     
                          ENDP


                          AREA ||i.treat_zlg7290||, CODE, READONLY, ALIGN=2

                  treat_zlg7290 PROC
;;;220    ********************************************************************/
;;;221    void treat_zlg7290(void)
000000  b538              PUSH     {r3-r5,lr}
;;;222    {
;;;223    	unsigned char Key_;
;;;224    	Key_ = Read_ZLG7290();
000002  f7fffffe          BL       Read_ZLG7290
000006  b2c4              UXTB     r4,r0
;;;225    
;;;226    	switch(Key_)
000008  2c1d              CMP      r4,#0x1d
00000a  d272              BCS      |L8.242|
00000c  e8dff004          TBB      [pc,r4]
000010  f00f1d2b          DCB      0xf0,0x0f,0x1d,0x2b
000014  39f0f0f0          DCB      0x39,0xf0,0xf0,0xf0
000018  f0475563          DCB      0xf0,0x47,0x55,0x63
00001c  72f0f0f0          DCB      0x72,0xf0,0xf0,0xf0
000020  f0808e9c          DCB      0xf0,0x80,0x8e,0x9c
000024  aaf0f0f0          DCB      0xaa,0xf0,0xf0,0xf0
000028  f0b8c6d4          DCB      0xf0,0xb8,0xc6,0xd4
00002c  e200              DCB      0xe2,0x00
;;;227    	{
;;;228    		case 1 :  Write_IRdata(0x00);
00002e  2000              MOVS     r0,#0
000030  f7fffffe          BL       Write_IRdata
;;;229    				  LCD_write_num_string(0x28,0x90,"send data 0x00",Red,Green);break;
000034  f44f60fc          MOV      r0,#0x7e0
000038  f44f4378          MOV      r3,#0xf800
00003c  a26e              ADR      r2,|L8.504|
00003e  2190              MOVS     r1,#0x90
000040  9000              STR      r0,[sp,#0]
000042  2028              MOVS     r0,#0x28
000044  f7fffffe          BL       LCD_write_num_string
000048  e0d3              B        |L8.498|
;;;230    		case 2 :  Write_IRdata(0x01);
00004a  2001              MOVS     r0,#1
00004c  f7fffffe          BL       Write_IRdata
;;;231    				  LCD_write_num_string(0x28,0x90,"send data 0x01",Red,Green);break;
000050  f44f60fc          MOV      r0,#0x7e0
000054  f44f4378          MOV      r3,#0xf800
000058  a26b              ADR      r2,|L8.520|
00005a  2190              MOVS     r1,#0x90
00005c  9000              STR      r0,[sp,#0]
00005e  2028              MOVS     r0,#0x28
000060  f7fffffe          BL       LCD_write_num_string
000064  e0c5              B        |L8.498|
;;;232    		case 3 :  Write_IRdata(0x02);
000066  2002              MOVS     r0,#2
000068  f7fffffe          BL       Write_IRdata
;;;233    				  LCD_write_num_string(0x28,0x90,"send data 0x02",Red,Green);break;
00006c  f44f60fc          MOV      r0,#0x7e0
000070  f44f4378          MOV      r3,#0xf800
000074  a268              ADR      r2,|L8.536|
000076  2190              MOVS     r1,#0x90
000078  9000              STR      r0,[sp,#0]
00007a  2028              MOVS     r0,#0x28
00007c  f7fffffe          BL       LCD_write_num_string
000080  e0b7              B        |L8.498|
;;;234    		case 4 :  Write_IRdata(0x03);
000082  2003              MOVS     r0,#3
000084  f7fffffe          BL       Write_IRdata
;;;235    				  LCD_write_num_string(0x28,0x90,"send data 0x03",Red,Green);break;
000088  f44f60fc          MOV      r0,#0x7e0
00008c  f44f4378          MOV      r3,#0xf800
000090  a265              ADR      r2,|L8.552|
000092  2190              MOVS     r1,#0x90
000094  9000              STR      r0,[sp,#0]
000096  2028              MOVS     r0,#0x28
000098  f7fffffe          BL       LCD_write_num_string
00009c  e0a9              B        |L8.498|
;;;236    		
;;;237    		case 9 :  Write_IRdata(0x04);
00009e  2004              MOVS     r0,#4
0000a0  f7fffffe          BL       Write_IRdata
;;;238    				  LCD_write_num_string(0x28,0x90,"send data 0x04",Red,Green);break;
0000a4  f44f60fc          MOV      r0,#0x7e0
0000a8  f44f4378          MOV      r3,#0xf800
0000ac  a262              ADR      r2,|L8.568|
0000ae  2190              MOVS     r1,#0x90
0000b0  9000              STR      r0,[sp,#0]
0000b2  2028              MOVS     r0,#0x28
0000b4  f7fffffe          BL       LCD_write_num_string
0000b8  e09b              B        |L8.498|
;;;239    		case 10:  Write_IRdata(0x05);
0000ba  2005              MOVS     r0,#5
0000bc  f7fffffe          BL       Write_IRdata
;;;240    				  LCD_write_num_string(0x28,0x90,"send data 0x05",Red,Green);break;
0000c0  f44f60fc          MOV      r0,#0x7e0
0000c4  f44f4378          MOV      r3,#0xf800
0000c8  a25f              ADR      r2,|L8.584|
0000ca  2190              MOVS     r1,#0x90
0000cc  9000              STR      r0,[sp,#0]
0000ce  2028              MOVS     r0,#0x28
0000d0  f7fffffe          BL       LCD_write_num_string
0000d4  e08d              B        |L8.498|
;;;241    		case 11:  Write_IRdata(0x06);
0000d6  2006              MOVS     r0,#6
0000d8  f7fffffe          BL       Write_IRdata
;;;242    				  LCD_write_num_string(0x28,0x90,"send data 0x06",Red,Green);break;
0000dc  f44f60fc          MOV      r0,#0x7e0
0000e0  f44f4378          MOV      r3,#0xf800
0000e4  a25c              ADR      r2,|L8.600|
0000e6  2190              MOVS     r1,#0x90
0000e8  9000              STR      r0,[sp,#0]
0000ea  2028              MOVS     r0,#0x28
0000ec  f7fffffe          BL       LCD_write_num_string
0000f0  e07f              B        |L8.498|
                  |L8.242|
0000f2  e07d              B        |L8.496|
;;;243    		case 12:  Write_IRdata(0x07);
0000f4  2007              MOVS     r0,#7
0000f6  f7fffffe          BL       Write_IRdata
;;;244    				  LCD_write_num_string(0x28,0x90,"send data 0x07",Red,Green);break;
0000fa  f44f60fc          MOV      r0,#0x7e0
0000fe  f44f4378          MOV      r3,#0xf800
000102  a259              ADR      r2,|L8.616|
000104  2190              MOVS     r1,#0x90
000106  9000              STR      r0,[sp,#0]
000108  2028              MOVS     r0,#0x28
00010a  f7fffffe          BL       LCD_write_num_string
00010e  e070              B        |L8.498|
;;;245    	
;;;246    		case 17:  Write_IRdata(0x08);
000110  2008              MOVS     r0,#8
000112  f7fffffe          BL       Write_IRdata
;;;247    				  LCD_write_num_string(0x28,0x90,"send data 0x08",Red,Green);break;
000116  f44f60fc          MOV      r0,#0x7e0
00011a  f44f4378          MOV      r3,#0xf800
00011e  a256              ADR      r2,|L8.632|
000120  2190              MOVS     r1,#0x90
000122  9000              STR      r0,[sp,#0]
000124  2028              MOVS     r0,#0x28
000126  f7fffffe          BL       LCD_write_num_string
00012a  e062              B        |L8.498|
;;;248    		case 18:  Write_IRdata(0x09);
00012c  2009              MOVS     r0,#9
00012e  f7fffffe          BL       Write_IRdata
;;;249    				  LCD_write_num_string(0x28,0x90,"send data 0x09",Red,Green);break;
000132  f44f60fc          MOV      r0,#0x7e0
000136  f44f4378          MOV      r3,#0xf800
00013a  a253              ADR      r2,|L8.648|
00013c  2190              MOVS     r1,#0x90
00013e  9000              STR      r0,[sp,#0]
000140  2028              MOVS     r0,#0x28
000142  f7fffffe          BL       LCD_write_num_string
000146  e054              B        |L8.498|
;;;250    		case 19:  Write_IRdata(0x0a);
000148  200a              MOVS     r0,#0xa
00014a  f7fffffe          BL       Write_IRdata
;;;251    				  LCD_write_num_string(0x28,0x90,"send data 0x0a",Red,Green);break;
00014e  f44f60fc          MOV      r0,#0x7e0
000152  f44f4378          MOV      r3,#0xf800
000156  a250              ADR      r2,|L8.664|
000158  2190              MOVS     r1,#0x90
00015a  9000              STR      r0,[sp,#0]
00015c  2028              MOVS     r0,#0x28
00015e  f7fffffe          BL       LCD_write_num_string
000162  e046              B        |L8.498|
;;;252    		case 20:  Write_IRdata(0x0b);
000164  200b              MOVS     r0,#0xb
000166  f7fffffe          BL       Write_IRdata
;;;253    		   		  LCD_write_num_string(0x28,0x90,"send data 0x0b",Red,Green);break;
00016a  f44f60fc          MOV      r0,#0x7e0
00016e  f44f4378          MOV      r3,#0xf800
000172  a24d              ADR      r2,|L8.680|
000174  2190              MOVS     r1,#0x90
000176  9000              STR      r0,[sp,#0]
000178  2028              MOVS     r0,#0x28
00017a  f7fffffe          BL       LCD_write_num_string
00017e  e038              B        |L8.498|
;;;254    
;;;255    		case 25:  Write_IRdata(0x0c);
000180  200c              MOVS     r0,#0xc
000182  f7fffffe          BL       Write_IRdata
;;;256    				  LCD_write_num_string(0x28,0x90,"send data 0x0c",Red,Green);break;
000186  f44f60fc          MOV      r0,#0x7e0
00018a  f44f4378          MOV      r3,#0xf800
00018e  a24a              ADR      r2,|L8.696|
000190  2190              MOVS     r1,#0x90
000192  9000              STR      r0,[sp,#0]
000194  2028              MOVS     r0,#0x28
000196  f7fffffe          BL       LCD_write_num_string
00019a  e02a              B        |L8.498|
;;;257    		case 26:  Write_IRdata(0x0d);
00019c  200d              MOVS     r0,#0xd
00019e  f7fffffe          BL       Write_IRdata
;;;258    				  LCD_write_num_string(0x28,0x90,"send data 0x0d",Red,Green);break;
0001a2  f44f60fc          MOV      r0,#0x7e0
0001a6  f44f4378          MOV      r3,#0xf800
0001aa  a247              ADR      r2,|L8.712|
0001ac  2190              MOVS     r1,#0x90
0001ae  9000              STR      r0,[sp,#0]
0001b0  2028              MOVS     r0,#0x28
0001b2  f7fffffe          BL       LCD_write_num_string
0001b6  e01c              B        |L8.498|
;;;259    		case 27:  Write_IRdata(0x0e);
0001b8  200e              MOVS     r0,#0xe
0001ba  f7fffffe          BL       Write_IRdata
;;;260    				  LCD_write_num_string(0x28,0x90,"send data 0x0e",Red,Green);break;
0001be  f44f60fc          MOV      r0,#0x7e0
0001c2  f44f4378          MOV      r3,#0xf800
0001c6  a244              ADR      r2,|L8.728|
0001c8  2190              MOVS     r1,#0x90
0001ca  9000              STR      r0,[sp,#0]
0001cc  2028              MOVS     r0,#0x28
0001ce  f7fffffe          BL       LCD_write_num_string
0001d2  e00e              B        |L8.498|
;;;261    		case 28:  Write_IRdata(0x0f);
0001d4  200f              MOVS     r0,#0xf
0001d6  f7fffffe          BL       Write_IRdata
;;;262    				  LCD_write_num_string(0x28,0x90,"send data 0x0f",Red,Green);break;
0001da  f44f60fc          MOV      r0,#0x7e0
0001de  f44f4378          MOV      r3,#0xf800
0001e2  a241              ADR      r2,|L8.744|
0001e4  2190              MOVS     r1,#0x90
0001e6  9000              STR      r0,[sp,#0]
0001e8  2028              MOVS     r0,#0x28
0001ea  f7fffffe          BL       LCD_write_num_string
0001ee  e000              B        |L8.498|
                  |L8.496|
;;;263    		//case 28: GPIO_WriteBit(GPIOD, GPIO_Pin_10, (BitAction)(1-GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_10)));break; 
;;;264    	   default :break;
0001f0  bf00              NOP      
                  |L8.498|
0001f2  bf00              NOP                            ;229
;;;265    	}
;;;266    
;;;267    }
0001f4  bd38              POP      {r3-r5,pc}
                          ENDP

0001f6  0000              DCW      0x0000
                  |L8.504|
0001f8  73656e64          DCB      "send data 0x00",0
0001fc  20646174
000200  61203078
000204  303000  
000207  00                DCB      0
                  |L8.520|
000208  73656e64          DCB      "send data 0x01",0
00020c  20646174
000210  61203078
000214  303100  
000217  00                DCB      0
                  |L8.536|
000218  73656e64          DCB      "send data 0x02",0
00021c  20646174
000220  61203078
000224  303200  
000227  00                DCB      0
                  |L8.552|
000228  73656e64          DCB      "send data 0x03",0
00022c  20646174
000230  61203078
000234  303300  
000237  00                DCB      0
                  |L8.568|
000238  73656e64          DCB      "send data 0x04",0
00023c  20646174
000240  61203078
000244  303400  
000247  00                DCB      0
                  |L8.584|
000248  73656e64          DCB      "send data 0x05",0
00024c  20646174
000250  61203078
000254  303500  
000257  00                DCB      0
                  |L8.600|
000258  73656e64          DCB      "send data 0x06",0
00025c  20646174
000260  61203078
000264  303600  
000267  00                DCB      0
                  |L8.616|
000268  73656e64          DCB      "send data 0x07",0
00026c  20646174
000270  61203078
000274  303700  
000277  00                DCB      0
                  |L8.632|
000278  73656e64          DCB      "send data 0x08",0
00027c  20646174
000280  61203078
000284  303800  
000287  00                DCB      0
                  |L8.648|
000288  73656e64          DCB      "send data 0x09",0
00028c  20646174
000290  61203078
000294  303900  
000297  00                DCB      0
                  |L8.664|
000298  73656e64          DCB      "send data 0x0a",0
00029c  20646174
0002a0  61203078
0002a4  306100  
0002a7  00                DCB      0
                  |L8.680|
0002a8  73656e64          DCB      "send data 0x0b",0
0002ac  20646174
0002b0  61203078
0002b4  306200  
0002b7  00                DCB      0
                  |L8.696|
0002b8  73656e64          DCB      "send data 0x0c",0
0002bc  20646174
0002c0  61203078
0002c4  306300  
0002c7  00                DCB      0
                  |L8.712|
0002c8  73656e64          DCB      "send data 0x0d",0
0002cc  20646174
0002d0  61203078
0002d4  306400  
0002d7  00                DCB      0
                  |L8.728|
0002d8  73656e64          DCB      "send data 0x0e",0
0002dc  20646174
0002e0  61203078
0002e4  306500  
0002e7  00                DCB      0
                  |L8.744|
0002e8  73656e64          DCB      "send data 0x0f",0
0002ec  20646174
0002f0  61203078
0002f4  306600  
0002f7  00                DCB      0
